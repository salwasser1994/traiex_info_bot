import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.client.bot import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

TOKEN = "8473772441:AAHpXfxOxR-OL6e3GSfh4xvgiDdykQhgTus"

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

user_state = {}
user_data = {}

def main_menu():
    keyboard = [
        [KeyboardButton(text="üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def post_calc_menu():
    keyboard = [
        [KeyboardButton(text="üí∞ –ì–æ—Ç–æ–≤ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å")],
        [KeyboardButton(text="–ù–µ –≥–æ—Ç–æ–≤")],
        [KeyboardButton(text="–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def add_back_button(options):
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" –ø–æ–¥ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=opt)] for opt in options] + [[KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]],
        resize_keyboard=True
    )

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø–æ—Å—á–∏—Ç–∞–µ–º, –∫–æ–≥–¥–∞ —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–∫–æ–ø–∏—Ç—å –Ω–∞ —Å–≤–æ—é —Ü–µ–ª—å.", reply_markup=main_menu())

@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    text = message.text

    if text == "üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç" or text == "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ":
        user_state[user_id] = "choose_goal"
        options = ["–ú–∞—à–∏–Ω–∞", "–î–æ–º", "–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥"]
        await message.answer("–ö–∞–∫–æ–≤–∞ —Ç–≤–æ—è —Ü–µ–ª—å?", reply_markup=add_back_button(options))
        return

    if user_state.get(user_id) == "choose_goal":
        user_data[user_id] = {"goal": text}
        if text == "–ú–∞—à–∏–Ω–∞":
            user_state[user_id] = "car_cost"
            options = ["100 000 ‚ÇΩ", "500 000 ‚ÇΩ", "1 000 000 ‚ÇΩ"]
            await message.answer("–ö–∞–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—à–∏–Ω—ã?", reply_markup=add_back_button(options))
        elif text == "–î–æ–º":
            user_state[user_id] = "house_cost"
            options = ["3 000 000 ‚ÇΩ", "5 000 000 ‚ÇΩ", "15 000 000 ‚ÇΩ"]
            await message.answer("–ö–∞–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–º–∞?", reply_markup=add_back_button(options))
        else:
            await message.answer("–ü–æ–∫–∞ —Å—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –ú–∞—à–∏–Ω—É –∏–ª–∏ –î–æ–º.", reply_markup=main_menu())
        return

    if user_state.get(user_id) in ["car_cost", "house_cost"]:
        try:
            amount = int(text.replace(" ‚ÇΩ", "").replace(" ", ""))
            user_data[user_id]["cost"] = amount
            user_state[user_id] = "monthly_invest"
            options = ["10 000 ‚ÇΩ", "20 000 ‚ÇΩ", "30 000 ‚ÇΩ"]
            await message.answer("–°–∫–æ–ª—å–∫–æ –≤—ã –≥–æ—Ç–æ–≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –º–µ—Å—è—Ü?", reply_markup=add_back_button(options))
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—É–º–º.")
        return

    if user_state.get(user_id) == "monthly_invest":
        try:
            monthly = int(text.replace(" ‚ÇΩ", "").replace(" ", ""))
            user_data[user_id]["monthly"] = monthly

            cost = user_data[user_id]["cost"]
            month = 0
            monthly_rate = 0.1125
            total = 0
            monthly_totals = []

            while total < cost:
                month += 1
                total = total * (1 + monthly_rate) + monthly
                monthly_totals.append(total)

            msg = f"üìà –ù–∞–∫–æ–ø–ª–µ–Ω–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º —Å —É—á–µ—Ç–æ–º —Å–ª–æ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ 11,25% –≤ –º–µ—Å—è—Ü:\n\n"
            for i, val in enumerate(monthly_totals, start=1):
                if i <= 3 or i > len(monthly_totals) - 3:
                    msg += f"–ú–µ—Å—è—Ü {i}: {int(val):,} ‚ÇΩ\n"
                elif i == 4:
                    msg += "...\n"

            msg += f"\n–° –≤–∞—à–µ–π –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–µ–π {monthly:,} ‚ÇΩ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–∫–æ–ø–∏—Ç—å –Ω–∞ {user_data[user_id]['goal']} —Å—Ç–æ–∏–º–æ—Å—Ç—å—é {cost:,} ‚ÇΩ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {month} –º–µ—Å—è—Ü–µ–≤.\n\n"
            msg += ("–í–∞–∂–Ω–æ: —Ä–∞—Å—á–µ—Ç —É—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ª–æ–∂–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç. "
                    "–ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü –≤–∞—à –∫–∞–ø–∏—Ç–∞–ª —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 11,25%, —á—Ç–æ —É—Å–∫–æ—Ä—è–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –æ–±—ã—á–Ω—ã–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤–∫–ª–∞–¥–æ–º.")

            await message.answer(msg, reply_markup=post_calc_menu())
            user_state.pop(user_id)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—É–º–º.")
        return

    if text == "–ù–µ –≥–æ—Ç–æ–≤":
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())

    if text == "üí∞ –ì–æ—Ç–æ–≤ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å":
        await message.answer("–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º...", reply_markup=main_menu())

    if text == "‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        user_state.pop(user_id, None)
        user_data.pop(user_id, None)
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
