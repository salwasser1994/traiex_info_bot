import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

TOKEN = "8473772441:AAHpXfxOxR-OL6e3GSfh4xvgiDdykQhgTus"

bot = Bot(token=TOKEN)
dp = Dispatcher()

user_data = {}
user_state = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    keyboard = [
        [KeyboardButton(text="üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# –ú–µ–Ω—é –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞
def post_calc_menu():
    keyboard = [
        [KeyboardButton(text="üí∞ –ì–æ—Ç–æ–≤ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å")],
        [KeyboardButton(text="–ù–µ –≥–æ—Ç–æ–≤")],
        [KeyboardButton(text="–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# –í–∞—Ä–∏–∞–Ω—Ç—ã —Ü–µ–ª–µ–π
goal_options = ["–ú–∞—à–∏–Ω–∞", "–î–æ–º", "–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥"]

# –í–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç–æ–∏–º–æ—Å—Ç–∏
cost_options = {
    "–ú–∞—à–∏–Ω–∞": ["100 000 ‚ÇΩ", "500 000 ‚ÇΩ", "1 000 000 ‚ÇΩ"],
    "–î–æ–º": ["3 000 000 ‚ÇΩ", "5 000 000 ‚ÇΩ", "15 000 000 ‚ÇΩ"]
}

# –í–∞—Ä–∏–∞–Ω—Ç—ã –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –≤–∑–Ω–æ—Å–∞
monthly_options = ["10 000 ‚ÇΩ", "20 000 ‚ÇΩ", "30 000 ‚ÇΩ"]

# –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
passive_options = ["100 000 ‚ÇΩ", "500 000 ‚ÇΩ", "1 000 000 ‚ÇΩ"]

# –ö–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ + "‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
def option_keyboard(options):
    kb = [[KeyboardButton(text=opt)] for opt in options]
    kb.append([KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    text = message.text

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if text == "‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" or text == "–ù–µ –≥–æ—Ç–æ–≤":
        user_state.pop(user_id, None)
        user_data.pop(user_id, None)
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=main_menu())
        return

    # –ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"
    if text == "üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç":
        user_state[user_id] = "choose_goal"
        await message.answer("–ö–∞–∫–æ–≤–∞ —Ç–≤–æ—è —Ü–µ–ª—å?", reply_markup=option_keyboard(goal_options))
        return

    # –í—ã–±–æ—Ä —Ü–µ–ª–∏
    if user_state.get(user_id) == "choose_goal":
        if text in goal_options:
            user_data[user_id] = {"goal": text}
            if text == "–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥":
                user_state[user_id] = "choose_target_income"
                await message.answer("–°–∫–æ–ª—å–∫–æ –≤ –º–µ—Å—è—Ü –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å?", reply_markup=option_keyboard(passive_options))
            else:
                user_state[user_id] = "choose_cost"
                await message.answer(f"–ö–∞–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å {text.lower()}?", reply_markup=option_keyboard(cost_options[text]))
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π.")
        return

    # –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ ‚Äî –≤—ã–±–æ—Ä –∂–µ–ª–∞–µ–º–æ–≥–æ –¥–æ—Ö–æ–¥–∞
    if user_state.get(user_id) == "choose_target_income":
        if text in passive_options:
            target_income = int(text.replace(" ‚ÇΩ", "").replace(" ", ""))
            user_data[user_id]["target_income"] = target_income
            user_state[user_id] = "choose_monthly_passive"
            await message.answer("–°–∫–æ–ª—å–∫–æ –≤—ã –≥–æ—Ç–æ–≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –º–µ—Å—è—Ü?", reply_markup=option_keyboard(monthly_options))
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—É–º–º.")
        return

    # –í—ã–±–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–ú–∞—à–∏–Ω–∞/–î–æ–º)
    if user_state.get(user_id) == "choose_cost":
        goal = user_data[user_id]["goal"]
        if text in cost_options[goal]:
            cost = int(text.replace(" ‚ÇΩ", "").replace(" ", ""))
            user_data[user_id]["cost"] = cost
            user_state[user_id] = "choose_monthly"
            await message.answer("–°–∫–æ–ª—å–∫–æ –≤—ã –≥–æ—Ç–æ–≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –º–µ—Å—è—Ü?", reply_markup=option_keyboard(monthly_options))
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—É–º–º.")
        return

    # –†–∞—Å—á–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–ª—è –ú–∞—à–∏–Ω–∞/–î–æ–º
    if user_state.get(user_id) == "choose_monthly":
        try:
            monthly = int(text.replace(" ‚ÇΩ", "").replace(" ", ""))
            user_data[user_id]["monthly"] = monthly

            cost = user_data[user_id]["cost"]
            month = 0
            monthly_rate = 0.1125
            total = 0
            monthly_totals = []

            while total < cost:
                month += 1
                total = (total + monthly) * (1 + monthly_rate)
                monthly_totals.append(total)

            msg = f"üìà –ù–∞–∫–æ–ø–ª–µ–Ω–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º —Å —É—á–µ—Ç–æ–º –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ —Å–ª–æ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ 11,25%:\n\n"
            for i, val in enumerate(monthly_totals, start=1):
                if i <= 3 or i > len(monthly_totals) - 3:
                    msg += f"–ú–µ—Å—è—Ü {i}: {int(val):,} ‚ÇΩ\n"
                elif i == 4:
                    msg += "...\n"

            msg += f"\n–° –≤–∞—à–µ–π –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–µ–π {monthly:,} ‚ÇΩ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–∫–æ–ø–∏—Ç—å –Ω–∞ {user_data[user_id]['goal'].lower()} —Å—Ç–æ–∏–º–æ—Å—Ç—å—é {cost:,} ‚ÇΩ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {month} –º–µ—Å—è—Ü–µ–≤.\n"
            msg += ("–í–∞–∂–Ω–æ: —Ä–∞—Å—á–µ—Ç —É—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ª–æ–∂–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç. –ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü –≤–∞—à –∫–∞–ø–∏—Ç–∞–ª —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 11,25%, —á—Ç–æ —É—Å–∫–æ—Ä—è–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ.")

            await message.answer(msg, reply_markup=post_calc_menu())
            user_state.pop(user_id)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—É–º–º.")
        return

    # –†–∞—Å—á–µ—Ç –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
    if user_state.get(user_id) == "choose_monthly_passive":
        try:
            monthly = int(text.replace(" ‚ÇΩ", "").replace(" ", ""))
            user_data[user_id]["monthly"] = monthly
            target_income = user_data[user_id]["target_income"]
            monthly_rate = 0.1125
            month = 0
            capital = 0
            monthly_totals = []

            while True:
                month += 1
                capital = (capital + monthly) * (1 + monthly_rate)
                passive = capital * monthly_rate
                monthly_totals.append(passive)
                if passive >= target_income:
                    break

            msg = f"üìà –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –ø–æ –º–µ—Å—è—Ü–∞–º:\n\n"
            for i, pas in enumerate(monthly_totals, start=1):
                if i <= 3 or i > len(monthly_totals) - 3:
                    msg += f"–ú–µ—Å—è—Ü {i}: {int(pas):,} ‚ÇΩ\n"
                elif i == 4:
                    msg += "...\n"

            msg += f"\n–ü—Ä–∏ –≤–∞—à–µ–π –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ {monthly:,} ‚ÇΩ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ {target_income:,} ‚ÇΩ/–º–µ—Å –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {month} –º–µ—Å—è—Ü–µ–≤.\n"
            msg += "–í–∞–∂–Ω–æ: —Ä–∞—Å—á–µ—Ç —É—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ª–æ–∂–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç. –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ –Ω–∞ –≤–∞—à –∫–∞–ø–∏—Ç–∞–ª."

            await message.answer(msg, reply_markup=post_calc_menu())
            user_state.pop(user_id)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—É–º–º.")
        return

    # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ"
    if text == "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ":
        user_state[user_id] = "choose_goal"
        await message.answer("–ö–∞–∫–æ–≤–∞ —Ç–≤–æ—è —Ü–µ–ª—å?", reply_markup=option_keyboard(goal_options))
        return

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é üëá", reply_markup=main_menu())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
