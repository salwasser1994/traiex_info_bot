import logging
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest

logging.basicConfig(level=logging.INFO)

# === –ö–æ–Ω—Ñ–∏–≥ ===
BOT_TOKEN = "8473772441:AAHpXfxOxR-OL6e3GSfh4xvgiDdykQhgTus"
ADMIN_ID = -1003081706651
OFFER_PDF_FILE_ID = "BQACAgQAAxkBAAIFOGi6vNHLzH9IyJt0q7_V4y73FcdrAAKXGwACeDjZUSdnK1dqaQoPNgQ"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

user_data = {}

# === –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ===
@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_data[message.from_user.id] = {"quiz_index":0,"quiz_score":0}
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å üöÄ", callback_data="start_survey")]
    ])
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n\n"
        "–î–∞–≤–∞–π —É–∑–Ω–∞–µ–º —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏, —Ç–≤–æ–∏ —Ü–µ–ª–∏ –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å. "
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –¥–∞—Ç—å —Ç–µ–±–µ –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Å–µ–∫—Ä–µ—Ç—ã —É—Å–ø–µ—Ö–∞ –∏ –¥–æ—Å—Ç—É–ø –∫ –ª–∏—á–Ω–æ–º—É –ø–æ–º–æ—â–Ω–∏–∫—É. "
        "–¢—ã —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∏—à—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤.\n\n"
        "–ì–æ—Ç–æ–≤ –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å?",
        reply_markup=kb
    )

# === –í–æ–ø—Ä–æ—Å—ã –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ ===
quiz_questions = [
    {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥?", "options":["–î–µ–Ω—å–≥–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å–∞–º–∏","–ó–∞—Ä–ø–ª–∞—Ç–∞","–í—ã–∏–≥—Ä—ã—à –≤ –ª–æ—Ç–µ—Ä–µ—é"], "correct":0},
    {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è?", "options":["–†–∞–∑–Ω—ã–µ –∞–∫—Ç–∏–≤—ã","–í—Å–µ –≤ –∞–∫—Ü–∏–∏","–í—Å–µ –≤ –æ–¥–∏–Ω –∞–∫—Ç–∏–≤"], "correct":0},
    {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Ä–∏—Å–∫?", "options":["–ü–æ—Ç–µ—Ä—è —á–∞—Å—Ç–∏ –∏–ª–∏ –≤—Å–µ—Ö –≤–ª–æ–∂–µ–Ω–∏–π","–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å","–ù–µ—Ç —Ä–∏—Å–∫–∞"], "correct":0},
    {"question": "–ß—Ç–æ –ø–æ–≤—ã—à–∞–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å?", "options":["–ë–æ–ª—å—à–µ —Ä–∏—Å–∫–∞","–ì–∞—Ä–∞–Ω—Ç–∏—è","–ù–∏—á–µ–≥–æ"], "correct":0},
    {"question": "–ß—Ç–æ –æ–±—ã—á–Ω–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—Ç –≤—ã—Å–æ–∫—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å?", "options":["–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫","–ì–∞—Ä–∞–Ω—Ç–∏—è","–ú–∞–ª—ã–π —Ä–∏—Å–∫"], "correct":0},
    {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å?", "options":["–°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è –≤ –¥–µ–Ω—å–≥–∏","–î–æ—Ö–æ–¥","–†–∏—Å–∫"], "correct":0},
    {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–∞–ø–∏—Ç–∞–ª?", "options":["–ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞","–î–æ–ª–≥","–ó–∞—Ä–ø–ª–∞—Ç–∞"], "correct":0},
    {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –∏–Ω—Ñ–ª—è—Ü–∏—è?", "options":["–†–æ—Å—Ç —Ü–µ–Ω –∏ –ø–∞–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏","–†–æ—Å—Ç –¥–æ—Ö–æ–¥–∞","–ü–∞–¥–µ–Ω–∏–µ —Ü–µ–Ω"], "correct":0},
    {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å?", "options":["–ü—Ä–∏–±—ã–ª—å –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π","–í–∫–ª–∞–¥ –≤ –±–∞–Ω–∫","–ü–æ–∫—É–ø–∫–∞ –∞–∫—Ü–∏–π"], "correct":0},
    {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ñ–æ–Ω–¥?", "options":["–°–±–µ—Ä–µ–∂–µ–Ω–∏—è –Ω–∞ —á–µ—Ä–Ω—ã–π –¥–µ–Ω—å","–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –∞–∫—Ü–∏–∏","–ö—Ä–µ–¥–∏—Ç—ã"], "correct":0}
]

# === –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ ===
async def send_quiz_question(user_id, message):
    index = user_data[user_id]["quiz_index"]
    if index < len(quiz_questions):
        q = quiz_questions[index]
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=opt, callback_data=f"quiz_{index}_{i}")] for i,opt in enumerate(q["options"])
        ])
        await message.edit_text(f"{q['question']}", reply_markup=kb)
    else:
        # –ü–æ—Å–ª–µ —Ñ–∏–Ω–≥—Ä–∞–º–æ—Ç—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–ª–∏
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ üí∏", callback_data="goal_passive")],
            [InlineKeyboardButton(text="–î–æ–º üè†", callback_data="goal_house")],
            [InlineKeyboardButton(text="–ú–∞—à–∏–Ω–∞ üöó", callback_data="goal_car")],
            [InlineKeyboardButton(text="–ü—Ä–∏—É–º–Ω–æ–∂–∏—Ç—å –∫–∞–ø–∏—Ç–∞–ª üìä", callback_data="goal_growth")]
        ])
        await message.edit_text("–ö–∞–∫–∞—è —Ç–≤–æ—è –≥–ª–∞–≤–Ω–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Ü–µ–ª—å?", reply_markup=kb)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Ñ–∏–Ω–≥—Ä–∞–º–æ—Ç—É ===
@dp.callback_query(F.data.startswith("quiz_"))
async def quiz_handler(query: CallbackQuery):
    parts = query.data.split("_")
    q_index, opt_index = int(parts[1]), int(parts[2])
    if opt_index == quiz_questions[q_index]["correct"]:
        user_data[query.from_user.id]["quiz_score"] += 1
    user_data[query.from_user.id]["quiz_index"] += 1
    await send_quiz_question(query.from_user.id, query.message)

# === –¶–µ–ª–∏ ===
@dp.callback_query(F.data.startswith("goal_"))
async def goal_handler(query: CallbackQuery):
    goal_map = {
        "goal_passive": "–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ üí∏",
        "goal_house": "–î–æ–º üè†",
        "goal_car": "–ú–∞—à–∏–Ω–∞ üöó",
        "goal_growth": "–ü—Ä–∏—É–º–Ω–æ–∂–∏—Ç—å –∫–∞–ø–∏—Ç–∞–ª üìä"
    }
    user_data[query.from_user.id]["goal"] = goal_map[query.data]

    sums_initial = ["10 000 ‚ÇΩ", "20 000 ‚ÇΩ", "30 000 ‚ÇΩ", "40 000 ‚ÇΩ", "50 000 ‚ÇΩ",
                    "100 000 ‚ÇΩ", "250 000 ‚ÇΩ", "500 000 ‚ÇΩ", "1 000 000 ‚ÇΩ"]
    keyboard_rows = []
    for i in range(0, len(sums_initial), 3):
        row = [InlineKeyboardButton(text=s, callback_data=f"initial_{s}") for s in sums_initial[i:i+3]]
        keyboard_rows.append(row)
    kb_initial = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    await query.message.edit_text("–°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ —Ç—ã –≥–æ—Ç–æ–≤ –≤–ª–æ–∂–∏—Ç—å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ?", reply_markup=kb_initial)

# === –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å ===
@dp.callback_query(F.data.startswith("initial_"))
async def initial_handler(query: CallbackQuery):
    user_data[query.from_user.id]["initial_sum"] = query.data.replace("initial_","")
    sums_monthly = ["0 ‚ÇΩ","10 000 ‚ÇΩ","20 000 ‚ÇΩ","30 000 ‚ÇΩ","40 000 ‚ÇΩ","50 000 ‚ÇΩ","100 000 ‚ÇΩ"]
    keyboard_rows=[]
    for i in range(0,len(sums_monthly),3):
        row = [InlineKeyboardButton(text=s, callback_data=f"sum_{s}") for s in sums_monthly[i:i+3]]
        keyboard_rows.append(row)
    kb_monthly = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    await query.message.edit_text("–°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –≥–æ—Ç–æ–≤ –≤–∫–ª–∞–¥—ã–≤–∞—Ç—å –µ–∂–µ–º–µ—Å—è—á–Ω–æ?", reply_markup=kb_monthly)

# === –ü—Ä–æ–≥–Ω–æ–∑ ===
@dp.callback_query(F.data.startswith("sum_"))
async def sum_handler(query: CallbackQuery):
    user_data[query.from_user.id]["sum"] = query.data.replace("sum_","")
    initial_sum = int(user_data[query.from_user.id]["initial_sum"].replace("‚ÇΩ","").replace(" ",""))
    monthly_invest = int(user_data[query.from_user.id]["sum"].replace("‚ÇΩ","").replace(" ",""))
    rate = 0.09
    periods = [1,3,6,12,24]
    balance = 0
    forecast_text = f"üí° –ü—Ä–æ–≥–Ω–æ–∑ Trading Bot –ø—Ä–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º –≤–∑–Ω–æ—Å–µ {initial_sum:,} ‚ÇΩ –∏ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–º –≤–ª–æ–∂–µ–Ω–∏–∏ {monthly_invest:,} ‚ÇΩ (9%/–º–µ—Å)\n\n"
    for month in periods:
        invest = initial_sum if month==1 else monthly_invest
        balance += invest
        passive = balance * rate
        balance += passive
        forecast_text += f"–ú–µ—Å—è—Ü {month}\nüíµ –í–ª–æ–∂–µ–Ω–∏–µ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {invest:,} ‚ÇΩ\n–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥: {int(passive):,} ‚ÇΩ\n–ë–∞–ª–∞–Ω—Å: {int(balance):,} ‚ÇΩ\n\n"
    kb_offer = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –æ—Ñ–µ—Ä—Ç–æ–π üìÑ", callback_data="offer_read")]
    ])
    await query.message.edit_text(forecast_text, reply_markup=kb_offer)

# === –û—Ñ–µ—Ä—Ç–∞ ===
@dp.callback_query(F.data=="offer_read")
async def offer_handler(query: CallbackQuery):
    await bot.send_document(chat_id=query.from_user.id, document=OFFER_PDF_FILE_ID)
    kb_accept = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å –æ—Ñ–µ—Ä—Ç–æ–π ‚úÖ", callback_data="offer_accept")]
    ])
    await query.message.answer("–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –æ—Ñ–µ—Ä—Ç—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ:", reply_markup=kb_accept)

# === –°–æ–≥–ª–∞—Å–∏–µ –∏ –≤—ã–±–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–∞ ===
@dp.callback_query(F.data=="offer_accept")
async def offer_accept_handler(query: CallbackQuery):
    kb_contact = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–¢–µ–ª–µ–≥—Ä–∞–º", callback_data="contact_telegram")],
        [InlineKeyboardButton(text="Email", callback_data="contact_email")],
        [InlineKeyboardButton(text="–¢–µ–ª–µ—Ñ–æ–Ω", callback_data="contact_phone")],
        [InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="contact_other")]
    ])
    await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–µ–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ª–∏—á–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º:", reply_markup=kb_contact)

# === –ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ username ===
@dp.callback_query(F.data.startswith("contact_"))
async def contact_method_handler(query: CallbackQuery):
    method = query.data.replace("contact_","")
    user_data[query.from_user.id]["contact_method"] = method
    if method=="telegram":
        await query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à @username –¥–ª—è —Å–≤—è–∑–∏ —á–µ—Ä–µ–∑ Telegram:")
    else:
        await query.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫ —Å –≤–∞–º–∏ –ª—É—á—à–µ —Å–≤—è–∑–∞—Ç—å—Å—è:")

@dp.message()
async def capture_contact_info(message: Message):
    user_id = message.from_user.id
    if user_id not in user_data: return
    contact_method = user_data[user_id].get("contact_method")
    if contact_method=="telegram":
        username = message.text.strip()
        if not username.startswith("@"):
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à @username.")
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞
        try:
            chat = await bot.get_chat(username)
        except TelegramBadRequest:
            await message.answer("–≠—Ç–æ—Ç username –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π @username.")
            return
        user_data[user_id]["contact_info"] = username
    else:
        user_data[user_id]["contact_info"] = message.text

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
    data = user_data[user_id]
    await bot.send_message(
        chat_id=ADMIN_ID,
        text=(
            f"üî• –ù–æ–≤—ã–π –∏–Ω–≤–µ—Å—Ç–æ—Ä!\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or '‚Äî'}\n"
            f"–ò–º—è: {message.from_user.full_name}\n"
            f"ID: {message.from_user.id}\n\n"
            f"üìå –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å: {data.get('quiz_score','‚Äî')}/{len(quiz_questions)}\n"
            f"üìå –¶–µ–ª—å: {data.get('goal','‚Äî')}\n"
            f"üí∞ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å: {data.get('initial_sum','‚Äî')}\n"
            f"üíµ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è: {data.get('sum','‚Äî')}\n"
            f"üìå –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥: {data.get('contact_method','‚Äî')}\n"
            f"üìå –ö–æ–Ω—Ç–∞–∫—Ç: {data.get('contact_info','‚Äî')}\n"
        )
    )
    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –Ω–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    await dp.start_polling(bot)

if __name__=="__main__":
    asyncio.run(main())
