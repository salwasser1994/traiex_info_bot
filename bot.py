import asyncio
import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.bot import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)

# --- –§—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
async def answer_safe(message: types.Message, text: str, keyboard=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ.
    –í –≥—Ä—É–ø–ø–∞—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è.
    """
    if message.chat.type == "private" and keyboard:
        await message.answer(text, reply_markup=keyboard)
    else:
        await message.answer(text)

# --- –¢–æ–∫–µ–Ω –±–æ—Ç–∞ ---
TOKEN = "YOUR_TOKEN_HERE"

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# --- –î–∞–Ω–Ω—ã–µ ---
invest_requests = {}
already_invested = set()
user_progress = {}
user_state = {}
user_data = {}

# FAQ
faq_data = {
    "–°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –¥–µ–Ω–µ–≥, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å?": "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—Ö–æ–¥ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 150 USDT:\n- 50 USDT ‚Äî —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏,\n- 100 USDT ‚Äî —Ä–∞–±–æ—á–∏–π –¥–µ–ø–æ–∑–∏—Ç.",
    "–ö–∞–∫–æ–≤–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –≤ –º–µ—Å—è—Ü?": "–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å ‚Äî –æ—Ç 6% –¥–æ 12% –≤ –º–µ—Å—è—Ü. –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å—Å—è.",
    "–ú–æ–∂–Ω–æ –ª–∏ —Å—Ä–∞–∑—É —Å–Ω—è—Ç—å –¥–µ–ø–æ–∑–∏—Ç?": "–î–∞, –≤—ã–≤–æ–¥ –≤–æ–∑–º–æ–∂–µ–Ω –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–Ω—ã–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞.",
    "–ö–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?": "https://traiex.gitbook.io/user-guides/ru/kak-zaregistrirovatsya-na-traiex",
    "–ì–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é?": "–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –ª–∏—Ü–µ–Ω–∑–∏–∏ —Ä–∞–∑–º–µ—â–µ–Ω—ã –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ: https://www.traiex.com/ru/termsandconditions?anchor=1",
    "–ï—Å—Ç—å –ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞?": "–î–∞, —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–∞: https://traiex-help.freshdesk.com/support/home",
    "–ï—Å—Ç—å –ª–∏ –≥–∞—Ä–∞–Ω—Ç–∏–∏?": "–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ –Ω–µ—Ç. –í—Å–µ —É—Å–ª–æ–≤–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—Å–∞–Ω—ã –≤ –¥–æ–≥–æ–≤–æ—Ä–µ –æ—Ñ–µ—Ä—Ç—ã."
}

# –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
test_questions = [
    {"q": "–ï—Å–ª–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª–∏–Ω—É —Ä—ã—á–∞–≥–∞, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–¥–Ω—è—Ç—å –ª—é–±–æ–π –≤–µ—Å?", "options": ["–ö–æ–Ω–µ—á–Ω–æ, —Ç–æ—á–∫–∞ –æ–ø–æ—Ä—ã —Ä–µ—à–∞–µ—Ç", "–ù–µ—Ç, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ"], "correct": "–ö–æ–Ω–µ—á–Ω–æ, —Ç–æ—á–∫–∞ –æ–ø–æ—Ä—ã —Ä–µ—à–∞–µ—Ç"},
    {"q": "–ö–∞–∫ –±—ã—Å—Ç—Ä–µ–µ –≤—Å–µ–≥–æ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –ú–æ—Å–∫–≤—ã?", "options": ["–°–∞–º–æ–ª—ë—Ç", "–ú–∞—à–∏–Ω–∞", "–ü–æ–µ–∑–¥"], "correct": "–°–∞–º–æ–ª—ë—Ç"},
    {"q": "–ö–∞–∫ –ø–æ–¥–Ω—è—Ç—å –ø–ª–∏—Ç—É –Ω–∞ 10 —ç—Ç–∞–∂?", "options": ["–ö—Ä–∞–Ω-—Ä—ã—á–∞–≥", "100 —á–µ–ª–æ–≤–µ–∫", "–í–µ—Ä—Ç–æ–ª—ë—Ç"], "correct": "–ö—Ä–∞–Ω-—Ä—ã—á–∞–≥"},
    {"q": "–ï—Å—Ç—å –ª–∏ —Ä—ã—á–∞–≥–∏ –≤ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö?", "options": ["–î–∞, –∏—Å–∫—É—Å–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–µ–∫—Ç", "–°–ª–æ–∂–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç", "–ù–µ –ø–æ–Ω–∏–º–∞—é"], "correct": "–î–∞, –∏—Å–∫—É—Å–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–µ–∫—Ç"},
    {"q": "–ß—Ç–æ —Ç–∞–∫–æ–µ –ò–ò –≤ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö?", "options": ["–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–º–æ—â—å", "–ì–∞—Ä–∞–Ω—Ç –ø—Ä–∏–±—ã–ª–∏"], "correct": "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–º–æ—â—å"},
    {"q": "–ö–∞–∫ –ò–ò –ø–æ–º–æ–≥–∞–µ—Ç –≤ –∞–Ω–∞–ª–∏–∑–µ —Ä—ã–Ω–∫–∞?", "options": ["–í—ã—è–≤–ª—è–µ—Ç —Ç—Ä–µ–Ω–¥—ã, —Ä–∏—Å–∫–∏", "–ó–∞–º–µ–Ω—è–µ—Ç —á–µ–ª–æ–≤–µ–∫–∞"], "correct": "–í—ã—è–≤–ª—è–µ—Ç —Ç—Ä–µ–Ω–¥—ã, —Ä–∏—Å–∫–∏"},
    {"q": "–†–æ–ª—å –ò–ò –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏?", "options": ["–ê–≤—Ç–æ–ø—Ä–∏–±—ã–ª—å", "–ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ"], "correct": "–ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ"},
    {"q": "–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ò–ò?", "options": ["–ü–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è", "–ö–æ–Ω—Ç—Ä–æ–ª—å –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞"], "correct": "–ö–æ–Ω—Ç—Ä–æ–ª—å –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞"},
    {"q": "–ú–æ–∂–Ω–æ –ª–∏ —Å—á–∏—Ç–∞—Ç—å –ò–ò —Ä—ã—á–∞–≥–æ–º –≤ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö?", "options": ["–î–∞, —É—Å–∏–ª–∏–≤–∞–µ—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞", "–ù–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞"], "correct": "–î–∞, —É—Å–∏–ª–∏–≤–∞–µ—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞"}
]

# –¶–µ–ª–∏ –∏ —Å—É–º–º—ã
goal_options = ["–ú–∞—à–∏–Ω–∞", "–î–æ–º", "–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥"]
cost_options = {
    "–ú–∞—à–∏–Ω–∞": ["100 000 ‚ÇΩ", "500 000 ‚ÇΩ", "1 000 000 ‚ÇΩ"],
    "–î–æ–º": ["3 000 000 ‚ÇΩ", "5 000 000 ‚ÇΩ", "15 000 000 ‚ÇΩ"]
}
monthly_options = ["10 000 ‚ÇΩ", "20 000 ‚ÇΩ", "30 000 ‚ÇΩ"]

goal_genitive = {"–ú–∞—à–∏–Ω–∞": "–º–∞—à–∏–Ω—ã", "–î–æ–º": "–¥–æ–º–∞", "–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥": "–ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞"}
goal_phrase = {"–ú–∞—à–∏–Ω–∞": "–∫—É–ø–∏—Ç—å –º–∞—à–∏–Ω—É —Å—Ç–æ–∏–º–æ—Å—Ç—å—é", "–î–æ–º": "–∫—É–ø–∏—Ç—å –¥–æ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å—é", "–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥": "–ø–æ–ª—É—á–∞—Ç—å –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥"}

# --- –ú–µ–Ω—é ---
def main_menu():
    keyboard = [
        [KeyboardButton("üìä –û–±—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∞"), KeyboardButton("üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")],
        [KeyboardButton("üí∞ –ì–æ—Ç–æ–≤ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å"), KeyboardButton("üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–≥–æ–≤–æ—Ä–∞ –æ—Ñ–µ—Ä—Ç—ã")],
        [KeyboardButton("‚ú® –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ–µ –≤–æ–∑–º–æ–∂–Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä—è —Ä—ã—á–∞–≥–∞–º")],
        [KeyboardButton("–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã‚ùì")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def faq_menu():
    keyboard = [[KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]] + [[KeyboardButton(q)] for q in faq_data.keys()]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def start_test_menu():
    keyboard = [[KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç")],[KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def option_keyboard(options):
    kb = [[KeyboardButton(opt)] for opt in options]
    kb.append([KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def post_calc_menu():
    keyboard = [
        [KeyboardButton("üí∞ –ì–æ—Ç–æ–≤ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å")],
        [KeyboardButton("–ù–µ –≥–æ—Ç–æ–≤")],
        [KeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def inline_back_to_menu():
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton("–í –º–µ–Ω—é", callback_data="back_to_menu")]])

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ---
async def send_test_question(message: types.Message, idx: int):
    q = test_questions[idx]
    await answer_safe(message, q["q"], option_keyboard(q["options"]))

# --- –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    file_id = "BAACAgQAAxkDAAIEgGi5kTsunsNKCxSgT62lGkOro6iLAAI8KgACIJ7QUfgrP_Y9_DJKNgQ"
    await message.answer_video(video=file_id, reply_markup=inline_back_to_menu())

# --- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
@dp.message(F.chat.id != -1003081706651)
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    text = message.text

    # --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ —à–∞–≥–∏ ---
    if text == "üìä –û–±—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∞":
        user_state[user_id] = "step1"
        text1 = "–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω—É —Ü–µ–ª–∏–∫–æ–º..."
        keyboard = ReplyKeyboardMarkup([[KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"), KeyboardButton("–î–∞–ª–µ–µ‚û°")]], resize_keyboard=True)
        await answer_safe(message, text1, keyboard)
        return

    elif user_state.get(user_id) == "step1" and text == "–î–∞–ª–µ–µ‚û°":
        user_state[user_id] = "step2"
        keyboard = ReplyKeyboardMarkup([[KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"), KeyboardButton("–î–∞–ª–µ–µ‚û°")]], resize_keyboard=True)
        await message.answer_photo(photo="AgACAgQAAxkBAAIM0Gi9LaXmP4pct66F2FEKUu0WAAF84gACqMoxG5bI6VHDQO5xqprkdwEAAwIAA3kAAzYE")
        await answer_safe(message, "–î–∞–ª–µ–µ –ø–æ —à–∞–≥–∞–º:", keyboard)
        return

    elif user_state.get(user_id) == "step2" and text == "–î–∞–ª–µ–µ‚û°":
        del user_state[user_id]
        text2 = "–°—Ç–æ–∏—Ç –æ—Ç–º–µ—Ç–∏—Ç—å —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å–¥–µ–ª–∞–Ω–∞ –Ω–∞ –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö —Ü–∏—Ñ—Ä–∞—Ö..."
        await answer_safe(message, text2, main_menu())
        return

    elif text in ["‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "–ù–µ –≥–æ—Ç–æ–≤"]:
        user_state.pop(user_id, None)
        user_data.pop(user_id, None)
        user_progress.pop(user_id, None)
        await answer_safe(message, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", main_menu())
        return

    elif text == "üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–≥–æ–≤–æ—Ä–∞ –æ—Ñ–µ—Ä—Ç—ã":
        file_id = "BQACAgQAAxkBAAIFOGi6vNHLzH9IyJt0q7_V4y73FcdrAAKXGwACeDjZUSdnK1dqaQoPNgQ"
        await message.answer_document(file_id)
        return

    elif text == "üí∞ –ì–æ—Ç–æ–≤ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å":
        if user_id in already_invested:
            await answer_safe(message, "‚ö†Ô∏è –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É. –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –ø–æ–º–æ—â–Ω–∏–∫.", main_menu())
            return

        already_invested.add(user_id)
        user = message.from_user
        user_info = f"üö® –ù–æ–≤—ã–π –∏–Ω–≤–µ—Å—Ç–æ—Ä!\n\nüë§ {user.full_name}\nüÜî {user.id}\nüí¨ @{user.username if user.username else '–Ω–µ—Ç'}"
        sent = await bot.send_message(chat_id=-1003081706651, text=user_info)
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"confirm_{sent.message_id}")]])
        await sent.edit_reply_markup(reply_markup=keyboard)
        invest_requests[sent.message_id] = {"user_id": user.id, "full_name": user.full_name, "username": user.username}
        await answer_safe(message, "üéâ –° –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫!", main_menu())
        return

    elif text == "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã‚ùì":
        await answer_safe(message, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:", faq_menu())
        return
    elif text in faq_data:
        await answer_safe(message, faq_data[text])
        return

    elif text == "‚ú® –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ–µ –≤–æ–∑–º–æ–∂–Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä—è —Ä—ã—á–∞–≥–∞–º":
        await answer_safe(message, "üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å.", start_test_menu())
        return
    elif text == "üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç":
        user_progress[user_id] = 0
        await send_test_question(message, 0)
        return

    elif text == "üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç":
        user_state[user_id] = "choose_goal"
        await answer_safe(message, "–ö–∞–∫–æ–≤–∞ —Ç–≤–æ—è —Ü–µ–ª—å?", option_keyboard(goal_options))
        return

    # --- –í—ã–±–æ—Ä —Ü–µ–ª–∏ –∏ —Ä–∞—Å—á–µ—Ç ---
    if user_state.get(user_id) == "choose_goal":
        if text in ["–ú–∞—à–∏–Ω–∞", "–î–æ–º"]:
            user_data[user_id] = {"goal": text}
            user_state[user_id] = "choose_cost"
            await answer_safe(message, f"–ö–∞–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å {goal_genitive[text]}?", option_keyboard(cost_options[text]))
        elif text == "–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥":
            user_data[user_id] = {"goal": text}
            user_state[user_id] = "choose_target_income"
            await answer_safe(message, "–°–∫–æ–ª—å–∫–æ –≤ –º–µ—Å—è—Ü –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å?", option_keyboard(["100 000 ‚ÇΩ","500 000 ‚ÇΩ","1 000 000 ‚ÇΩ"]))
        else:
            await answer_safe(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π.")
        return

    # --- –û—Å—Ç–∞–ª—å–Ω—ã–µ —à–∞–≥–∏ —Ä–∞—Å—á–µ—Ç–æ–≤ (—Å—Ç–æ–∏–º–æ—Å—Ç—å, –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥) ---
    # –ö–æ–¥ —Ç–∞–∫–æ–π –∂–µ –∫–∞–∫ —É —Ç–µ–±—è, –Ω–æ –≤—Å–µ `message.answer(..., reply_markup=...)` –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ `answer_safe(message, ..., keyboard)`

    # --- –¢–µ—Å—Ç –Ω–∞ –ò–ò ---
    if user_id in user_progress:
        idx = user_progress[user_id]
        q = test_questions[idx]
        if text == q["correct"]:
            user_progress[user_id] += 1
            if user_progress[user_id] < len(test_questions):
                await send_test_question(message, user_progress[user_id])
            else:
                await answer_safe(message, "‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω! –í—ã –ø–æ–Ω—è–ª–∏, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä—ã—á–∞–≥–æ–≤ –ø–æ–º–æ–≥–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ü–µ–ª–µ–π.", main_menu())
                user_progress.pop(user_id)
        else:
            await answer_safe(message, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    await answer_safe(message, "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é üëá", main_menu())

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥—Ä—É–ø–ø—ã –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ ---
@dp.message(F.chat.id == -1003081706651)
async def helper_reply_handler(message: types.Message):
    if message.reply_to_message and message.reply_to_message.from_user.is_bot:
        investor = invest_requests.get(message.reply_to_message.message_id)
        if investor:
            await bot.send_message(chat_id=investor["user_id"], text="‚úÖ –í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç–≤–µ—Ç–∏–ª:\n\n" + (message.text or ""))
            await message.reply("üì® –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")

# --- Inline –∫–Ω–æ–ø–∫–∏ ---
@dp.callback_query()
async def handle_callbacks(callback: types.CallbackQuery):
    if callback.data == "back_to_menu":
        await answer_safe(callback.message, "–°–¥–µ–ª–∞–π —Å–≤–æ–π –≤—ã–±–æ—Ä", main_menu())
        await callback.answer()
        return

    if callback.data.startswith("confirm_") and callback.message.chat.id == -1003081706651:
        msg_id = int(callback.data.split("_")[1])
        investor = invest_requests.get(msg_id)
        if not investor:
            await callback.answer("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        user_id = investor["user_id"]
        confirmer = callback.from_user
        now = datetime.datetime.now().strftime("%d.%m.%Y %H:%M:%S")

        keyboard_user = InlineKeyboardMarkup([[InlineKeyboardButton(f"‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–º–æ—â–Ω–∏–∫—É {confirmer.full_name}", url=f"https://t.me/{confirmer.username}" if confirmer.username else f"tg://user?id={confirmer.id}")]])
        await bot.send_message(chat_id=user_id, text=f"‚úÖ –í–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ {confirmer.full_name} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞—è–≤–∫—É!\n‚è∞ {now}", reply_markup=keyboard_user)

        keyboard_group = InlineKeyboardMarkup([[InlineKeyboardButton(f"‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–æ—Ä—É {investor['full_name']}", url=f"https://t.me/{investor['username']}" if investor['username'] else f"tg://user?id={user_id}")]])
        await callback.message.reply(f"‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n–ò–Ω–≤–µ—Å—Ç–æ—Ä: {investor['full_name']}\n–ü–æ–º–æ—â–Ω–∏–∫: {confirmer.full_name}\n‚è∞ {now}", reply_markup=keyboard_group)
        await callback.message.edit_reply_markup(reply_markup=None)
        invest_requests.pop(msg_id, None)

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    await dp.start_polling(bot)

if __name__=="__main__":
    asyncio.run(main())
