import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command

TOKEN = "–¢–û–ö–ï–ù_–¢–í–û–ï–ì–û_–ë–û–¢–ê"

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")]],
    resize_keyboard=True
)

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========

@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üöÄ", reply_markup=main_menu)


@dp.message(F.text == "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")
async def start_test(message: types.Message):
    user_data[message.from_user.id] = {}
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú–∞—à–∏–Ω–∞"), KeyboardButton(text="–î–æ–º")],
            [KeyboardButton(text="–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer("–ö–∞–∫–æ–≤–∞ —Ç–≤–æ—è —Ü–µ–ª—å?", reply_markup=kb)


@dp.message(F.text.in_(["–ú–∞—à–∏–Ω–∞", "–î–æ–º", "–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥"]))
async def choose_path(message: types.Message):
    uid = message.from_user.id
    user_data[uid]["path"] = message.text

    if message.text == "–ú–∞—à–∏–Ω–∞":
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="100000"), KeyboardButton(text="500000"), KeyboardButton(text="1000000")]],
            resize_keyboard=True
        )
        await message.answer("–ö–∞–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—à–∏–Ω—ã?", reply_markup=kb)

    elif message.text == "–î–æ–º":
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="3000000"), KeyboardButton(text="5000000"), KeyboardButton(text="15000000")]],
            resize_keyboard=True
        )
        await message.answer("–ö–∞–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–º–∞?", reply_markup=kb)

    elif message.text == "–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥":
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="100000"), KeyboardButton(text="500000"), KeyboardButton(text="1000000")]],
            resize_keyboard=True
        )
        await message.answer("–ö–∞–∫–æ–π –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –≤ –º–µ—Å—è—Ü —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å?", reply_markup=kb)


@dp.message(F.text.regexp(r"^\d+$"))
async def numeric_answer(message: types.Message):
    uid = message.from_user.id
    data = user_data.get(uid, {})

    # –ü–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç (—Ü–µ–ª—å)
    if "first" not in data:
        user_data[uid]["first"] = int(message.text)
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="10000"), KeyboardButton(text="20000"), KeyboardButton(text="30000")]],
            resize_keyboard=True
        )
        await message.answer("–°–∫–æ–ª—å–∫–æ –≤—ã –≥–æ—Ç–æ–≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –º–µ—Å—è—Ü?", reply_markup=kb)
        return

    # –í—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç (–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏)
    if "second" not in data:
        user_data[uid]["second"] = int(message.text)

        path = user_data[uid]["path"]
        first = user_data[uid]["first"]
        monthly = user_data[uid]["second"]

        # –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å 135% –≥–æ–¥–æ–≤—ã—Ö
        annual_rate = 1.35
        monthly_rate = (1 + annual_rate) ** (1/12) - 1

        months = 0
        balance = 0
        target = 0

        # ===== –í–µ—Ç–≤—å "–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥" =====
        if path == "–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥":
            target_income = first
            balance = 1
            while balance * monthly_rate < target_income:
                balance += monthly
                balance *= (1 + monthly_rate)
                months += 1
            years = months // 12
            months = months % 12
            await message.answer(
                f"–° –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –ò–ò-–±–æ—Ç–∞, –ø—Ä–∏ –≤–∞—à–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö {monthly}‚ÇΩ "
                f"–≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ {target_income}‚ÇΩ/–º–µ—Å "
                f"—á–µ—Ä–µ–∑ {years} –ª–µ—Ç –∏ {months} –º–µ—Å."
            )
            return

        # ===== –í–µ—Ç–≤–∏ "–ú–∞—à–∏–Ω–∞" –∏ "–î–æ–º" =====
        target = first
        while balance < target:
            balance += monthly
            balance *= (1 + monthly_rate)
            months += 1

        years = months // 12
        months = months % 12

        await message.answer(
            f"–° –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –ò–ò-–±–æ—Ç–∞, –ø—Ä–∏ –≤–∞—à–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö {monthly}‚ÇΩ "
            f"–≤—ã —Å–º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å {path.lower()} —Å—Ç–æ–∏–º–æ—Å—Ç—å—é {target}‚ÇΩ "
            f"—á–µ—Ä–µ–∑ {years} –ª–µ—Ç –∏ {months} –º–µ—Å."
        )


# ========== –ó–ê–ü–£–°–ö ==========
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
