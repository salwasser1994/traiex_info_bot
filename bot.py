import logging
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

logging.basicConfig(level=logging.INFO)

# === –ö–æ–Ω—Ñ–∏–≥ ===
BOT_TOKEN = "8473772441:AAHpXfxOxR-OL6e3GSfh4xvgiDdykQhgTus"
ADMIN_ID = -1003081706651  # –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –¥–ª—è –ª–∏–¥–æ–≤
OFFER_PDF_FILE_ID = "BQACAgQAAxkBAAIFOGi6vNHLzH9IyJt0q7_V4y73FcdrAAKXGwACeDjZUSdnK1dqaQoPNgQ"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# === –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ warm-up ===
@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_data[message.from_user.id] = {}
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞, —Ö–æ—á—É —É–∑–Ω–∞—Ç—å! üöÄ", callback_data="warmup_yes")],
        [InlineKeyboardButton(text="–ù–µ—Ç, –ø—Ä–æ—Å—Ç–æ —Ö–æ—á—É –∏–¥–µ–∏ üí°", callback_data="warmup_no")]
    ])
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n"
        "–Ø —Ç–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –§–∏–Ω–∞–Ω—Å–æ–≤–∏—á. üíº\n"
        "–¢—ã –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –∑–∞–¥—É–º—ã–≤–∞–ª—Å—è, –∫–∞–∫ –±–æ–≥–∞—Ç—ã–µ –ª—é–¥–∏ –∑–∞—Å—Ç–∞–≤–ª—è—é—Ç –¥–µ–Ω—å–≥–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —Å–µ–±—è?",
        reply_markup=kb
    )

@dp.callback_query(F.data.startswith("warmup_"))
async def warmup_handler(query: CallbackQuery):
    user_data[query.from_user.id]["warmup"] = query.data
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞, —É–∂–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É—é üìà", callback_data="experience_yes")],
        [InlineKeyboardButton(text="–ù–µ—Ç, —Ö–æ—á—É –Ω–∞—á–∞—Ç—å üü¢", callback_data="experience_no")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–æ–≤–∞–ª, –Ω–æ –±—ã–ª–∏ –Ω–µ—É–¥–∞—á–∏ ‚ùå", callback_data="experience_fail")]
    ])
    await query.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –ê —É —Ç–µ–±—è –µ—Å—Ç—å –æ–ø—ã—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è?", reply_markup=kb)

@dp.callback_query(F.data.startswith("experience_"))
async def experience_handler(query: CallbackQuery):
    user_data[query.from_user.id]["experience"] = query.data.replace("experience_", "")
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞, –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ä–æ–≤–∞–Ω üìä", callback_data="discipline_yes")],
        [InlineKeyboardButton(text="–ù–µ —Å–æ–≤—Å–µ–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ä–æ–≤–∞–Ω ‚ö†Ô∏è", callback_data="discipline_no")]
    ])
    await query.message.edit_text("–¢—ã —Å–ª–µ–¥–∏—à—å –∑–∞ —Å–≤–æ–∏–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏?", reply_markup=kb)

# === –ú–∏–Ω–∏-—Ç–µ—Å—Ç –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ ===
quiz_questions = [
    {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Ä–∏—Å–∫?",
     "options": ["–ü–æ—Ç–µ—Ä—è —á–∞—Å—Ç–∏ –∏–ª–∏ –≤—Å–µ—Ö –≤–ª–æ–∂–µ–Ω–∏–π", "–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å", "–ë–µ—Å–ø—Ä–æ–∏–≥—Ä—ã—à–Ω–∞—è —Å—Ç–∞–≤–∫–∞"],
     "correct": 0},
    {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è?",
     "options": ["–í–ª–æ–∂–µ–Ω–∏–µ –≤ —Ä–∞–∑–Ω—ã–µ –∞–∫—Ç–∏–≤—ã", "–í–ª–æ–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ –∞–∫—Ü–∏–∏", "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∏—Å–∫–æ–≤"],
     "correct": 0},
    {"question": "–ß—Ç–æ –æ–±—ã—á–Ω–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—Ç –≤—ã—Å–æ–∫—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å?",
     "options": ["–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫", "–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Ö–æ–¥", "–ú–∞–ª—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å"],
     "correct": 0}
]

@dp.callback_query(F.data.startswith("discipline_"))
async def discipline_handler(query: CallbackQuery):
    user_data[query.from_user.id]["discipline"] = query.data.replace("discipline_", "")
    user_data[query.from_user.id]["quiz_index"] = 0
    user_data[query.from_user.id]["quiz_score"] = 0
    await send_quiz_question(query.from_user.id, query.message)

async def send_quiz_question(user_id, message):
    index = user_data[user_id]["quiz_index"]
    q = quiz_questions[index]
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=opt, callback_data=f"quiz_{index}_{i}")] for i, opt in enumerate(q["options"])
    ])
    await message.edit_text(f"–í–æ–ø—Ä–æ—Å {index+1}:\n{q['question']}", reply_markup=kb)

@dp.callback_query(F.data.startswith("quiz_"))
async def quiz_handler(query: CallbackQuery):
    parts = query.data.split("_")
    q_index, opt_index = int(parts[1]), int(parts[2])
    if opt_index == quiz_questions[q_index]["correct"]:
        user_data[query.from_user.id]["quiz_score"] += 1
    user_data[query.from_user.id]["quiz_index"] += 1
    if user_data[query.from_user.id]["quiz_index"] < len(quiz_questions):
        await send_quiz_question(query.from_user.id, query.message)
    else:
        await query.message.edit_text(
            f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –¢—ã –Ω–∞–±—Ä–∞–ª {user_data[query.from_user.id]['quiz_score']}/"
            f"{len(quiz_questions)} –±–∞–ª–ª–æ–≤.\n\n"
            "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–æ–≥–Ω–æ–∑—É –∏ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—é —Å –æ—Ñ–µ—Ä—Ç–æ–π."
        )
        # –î–∞–ª–µ–µ —Å—Ä–∞–∑—É –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤–∑–Ω–æ—Å–∞
        sums_initial = ["10 000 ‚ÇΩ", "20 000 ‚ÇΩ", "30 000 ‚ÇΩ", "40 000 ‚ÇΩ", "50 000 ‚ÇΩ",
                        "100 000 ‚ÇΩ", "250 000 ‚ÇΩ", "500 000 ‚ÇΩ", "1 000 000 ‚ÇΩ"]
        keyboard_rows = []
        for i in range(0, len(sums_initial), 3):
            row = [InlineKeyboardButton(text=s, callback_data=f"initial_{s}") for s in sums_initial[i:i+3]]
            keyboard_rows.append(row)
        kb_initial = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
        await query.message.answer("–°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ —Ç—ã –≥–æ—Ç–æ–≤ –≤–ª–æ–∂–∏—Ç—å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ?", reply_markup=kb_initial)

# === –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å ===
@dp.callback_query(F.data.startswith("initial_"))
async def initial_handler(query: CallbackQuery):
    user_data[query.from_user.id]["initial_sum"] = query.data.replace("initial_", "")
    sums_monthly = ["0 ‚ÇΩ", "10 000 ‚ÇΩ", "20 000 ‚ÇΩ", "30 000 ‚ÇΩ", "40 000 ‚ÇΩ", "50 000 ‚ÇΩ", "100 000 ‚ÇΩ"]
    keyboard_rows = []
    for i in range(0, len(sums_monthly), 3):
        row = [InlineKeyboardButton(text=s, callback_data=f"sum_{s}") for s in sums_monthly[i:i+3]]
        keyboard_rows.append(row)
    kb_monthly = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    await query.message.edit_text("–°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ —Ç—ã –≥–æ—Ç–æ–≤ –≤–∫–ª–∞–¥—ã–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü?", reply_markup=kb_monthly)

# === –°—É–º–º–∞ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –≤–ª–æ–∂–µ–Ω–∏—è –∏ –ø—Ä–æ–≥–Ω–æ–∑ ===
@dp.callback_query(F.data.startswith("sum_"))
async def sum_handler(query: CallbackQuery):
    user_data[query.from_user.id]["sum"] = query.data.replace("sum_", "")
    initial_sum = int(user_data[query.from_user.id]["initial_sum"].replace("‚ÇΩ","").replace(" ",""))
    monthly_invest = int(user_data[query.from_user.id]["sum"].replace("‚ÇΩ","").replace(" ",""))
    rate = 0.09
    periods = [1,3,6,12,24]  # –º–µ—Å—è—Ü—ã –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞

    balance = 0
    forecast_text = f"üí° –ü—Ä–æ–≥–Ω–æ–∑ Trading Bot –ø—Ä–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º –≤–∑–Ω–æ—Å–µ {initial_sum:,} ‚ÇΩ –∏ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–º –≤–ª–æ–∂–µ–Ω–∏–∏ {monthly_invest:,} ‚ÇΩ (9%/–º–µ—Å)\n\n"

    for month in range(1, max(periods)+1):
        # –í–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        if month == 1:
            invested_this_month = initial_sum
        else:
            invested_this_month = monthly_invest
        balance += invested_this_month

        # –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü
        passive_income = int(balance * rate)
        balance += passive_income

        if month in periods:
            forecast_text += (f"–ú–µ—Å—è—Ü {month}\n"
                              f"üíµ –í–ª–æ–∂–µ–Ω–∏–µ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {invested_this_month:,} ‚ÇΩ\n"
                              f"–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥: {passive_income:,} ‚ÇΩ (9%)\n"
                              f"–ë–∞–ª–∞–Ω—Å: {balance:,} ‚ÇΩ\n\n")

    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –æ—Ñ–µ—Ä—Ç–æ–π
    kb_offer = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –æ—Ñ–µ—Ä—Ç–æ–π üìÑ", callback_data="offer_read")]
    ])
    await query.message.edit_text(forecast_text, reply_markup=kb_offer)

# === –û–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ —Å –æ—Ñ–µ—Ä—Ç–æ–π ===
@dp.callback_query(F.data=="offer_read")
async def offer_handler(query: CallbackQuery):
    await bot.send_document(chat_id=query.from_user.id, document=OFFER_PDF_FILE_ID)
    kb_accept = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å –æ—Ñ–µ—Ä—Ç–æ–π ‚úÖ", callback_data="offer_accept")]
    ])
    await query.message.answer("–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –æ—Ñ–µ—Ä—Ç—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ:", reply_markup=kb_accept)

# === –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ñ–µ—Ä—Ç—ã –∏ —Å–≤—è–∑—å —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º ===
@dp.callback_query(F.data=="offer_accept")
async def offer_accept_handler(query: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º üë®‚Äçüíº", callback_data="contact_expert")]
    ])
    await query.message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É.", reply_markup=kb)

@dp.callback_query(F.data=="contact_expert")
async def contact_handler(query: CallbackQuery):
    data = user_data.get(query.from_user.id, {})
    await query.message.answer("–°—É–ø–µ—Ä üéâ –Ø –ø–µ—Ä–µ–¥–∞–ª —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞—à–µ–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –æ–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π üë®‚Äçüíª")
    await bot.send_message(
        chat_id=ADMIN_ID,
        text=(f"üî• –ù–æ–≤—ã–π –ª–∏–¥!\n\n"
              f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{query.from_user.username}\n"
              f"–ò–º—è: {query.from_user.full_name}\n"
              f"ID: {query.from_user.id}\n\n"
              f"üìå –û–ø—ã—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {data.get('experience','‚Äî')}\n"
              f"üí∞ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å: {data.get('initial_sum','‚Äî')}\n"
              f"üíµ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è: {data.get('sum','‚Äî')}\n")
    )

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    await dp.start_polling(bot)

if __name__=="__main__":
    asyncio.run(main())
