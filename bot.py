import logging
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

logging.basicConfig(level=logging.INFO)

# === –ö–æ–Ω—Ñ–∏–≥ ===
BOT_TOKEN = "8473772441:AAHpXfxOxR-OL6e3GSfh4xvgiDdykQhgTus"
ADMIN_ID = -1003081706651  # –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –¥–ª—è –ª–∏–¥–æ–≤
OFFER_PDF_FILE_ID = "BQACAgQAAxkBAAIFOGi6vNHLzH9IyJt0q7_V4y73FcdrAAKXGwACeDjZUSdnK1dqaQoPNgQ"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# === –í–æ–ø—Ä–æ—Å—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ ===
quiz_questions = [
    {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥?", "options": ["–î–æ—Ö–æ–¥ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã", "–ó–∞—Ä–ø–ª–∞—Ç–∞", "–°–ª—É—á–∞–π–Ω—ã–µ –¥–µ–Ω—å–≥–∏"], "correct": 0},
    {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è?", "options": ["–†–∞–∑–Ω—ã–µ –∞–∫—Ç–∏–≤—ã", "–¢–æ–ª—å–∫–æ –∞–∫—Ü–∏–∏", "–ù–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å"], "correct": 0},
    {"question": "–ß—Ç–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—Ç –≤—ã—Å–æ–∫—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å?", "options": ["–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫", "–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å", "–ù–µ—Ç —Ä–∏—Å–∫–∞"], "correct": 0},
    {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Ä–∏—Å–∫?", "options": ["–ü–æ—Ç–µ—Ä—è –≤–ª–æ–∂–µ–Ω–∏–π", "–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Ö–æ–¥", "–ú–∞–ª—ã–π —Ä–∏—Å–∫"], "correct": 0},
    {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å?", "options": ["–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –±—ã—Å—Ç—Ä–æ –ø—Ä–æ–¥–∞—Ç—å –∞–∫—Ç–∏–≤", "–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥", "–í—ã—Å–æ–∫–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å"], "correct": 0},
    {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ —Å–ª–æ–∂–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç?", "options": ["–ü—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞ –ø—Ä–æ—Ü–µ–Ω—Ç—ã", "–ü—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞ –≤–∑–Ω–æ—Å –æ–¥–∏–Ω —Ä–∞–∑", "–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –±–µ–∑ –¥–æ—Ö–æ–¥–∞"], "correct": 0},
    {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ñ–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫?", "options": ["–†—ã–Ω–æ–∫ –∞–∫—Ü–∏–π –∏ –æ–±–ª–∏–≥–∞—Ü–∏–π", "–ë–∞–Ω–∫", "–¢–æ–ª—å–∫–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"], "correct": 0},
    {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –∏–Ω—Ñ–ª—è—Ü–∏—è?", "options": ["–†–æ—Å—Ç —Ü–µ–Ω", "–°–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω", "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω"], "correct": 0},
    {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ?", "options": ["–ó–∞–µ–º–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π", "–õ–∏—á–Ω—ã–µ –¥–µ–Ω—å–≥–∏", "–î–æ—Ö–æ–¥ –±–µ–∑ —Ä–∏—Å–∫–∞"], "correct": 0},
    {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π?", "options": ["–°–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤", "–û–¥–∏–Ω –∞–∫—Ç–∏–≤", "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç"], "correct": 0},
]

# === –°—Ç–∞—Ä—Ç ===
@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_data[message.from_user.id] = {
        "username": message.from_user.username or "‚Äî",
        "full_name": message.from_user.full_name or "‚Äî"
    }
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞, —Ö–æ—á—É –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å! üöÄ", callback_data="start_quiz")],
        [InlineKeyboardButton(text="–ü—Ä–æ—Å—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–¥–µ–∏ üí°", callback_data="skip_quiz")]
    ])
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n\n"
        "üí° –ú—ã —Ö–æ—Ç–∏–º —É–∑–Ω–∞—Ç—å —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–º–æ—á—å —Ç–µ–±–µ.\n"
        "–ü–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞ —Ç—ã –ø–æ–ª—É—á–∏—à—å –¥–æ—Å—Ç—É–ø –∫:\n"
        "‚Ä¢ –ü–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Å–µ–∫—Ä–µ—Ç–∞–º —É—Å–ø–µ—Ö–∞\n"
        "‚Ä¢ –°–≤—è–∑–∏ —Å –ª–∏—á–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º (—Ä–µ–∞–ª—å–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º)\n"
        "‚Ä¢ –ü—Ä–∏–≤–∞—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö—Å—è —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏\n\n"
        "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?",
        reply_markup=kb
    )

# === –ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞ ===
@dp.callback_query(F.data=="start_quiz")
async def start_quiz_handler(query: CallbackQuery):
    user_data[query.from_user.id]["quiz_index"] = 0
    user_data[query.from_user.id]["quiz_score"] = 0
    await send_quiz_question(query.from_user.id, query.message)

async def send_quiz_question(user_id, message):
    index = user_data[user_id]["quiz_index"]
    q = quiz_questions[index]
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=opt, callback_data=f"quiz_{index}_{i}")] for i, opt in enumerate(q["options"])
    ])
    await message.edit_text(f"{q['question']}", reply_markup=kb)

@dp.callback_query(F.data.startswith("quiz_"))
async def quiz_handler(query: CallbackQuery):
    parts = query.data.split("_")
    q_index, opt_index = int(parts[1]), int(parts[2])
    if opt_index == quiz_questions[q_index]["correct"]:
        user_data[query.from_user.id]["quiz_score"] += 1
    user_data[query.from_user.id]["quiz_index"] += 1
    if user_data[query.from_user.id]["quiz_index"] < len(quiz_questions):
        await send_quiz_question(query.from_user.id, query.message)
    else:
        # –ü–æ—Å–ª–µ –æ–ø—Ä–æ—Å–∞ –∏–¥—ë–º –∫ –≤—ã–±–æ—Ä—É —Ü–µ–ª–∏
        kb_goals = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ üí∏", callback_data="goal_passive"),
             InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –¥–æ–º üè†", callback_data="goal_house"),
             InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –º–∞—à–∏–Ω—É üöó", callback_data="goal_car"),
             InlineKeyboardButton(text="–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—É–º–Ω–æ–∂–∏—Ç—å –∫–∞–ø–∏—Ç–∞–ª üìä", callback_data="goal_growth")]
        ])
        await query.message.edit_text(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Ü–µ–ª—å:", reply_markup=kb_goals
        )

# === –í—ã–±–æ—Ä —Ü–µ–ª–∏ ===
@dp.callback_query(F.data.startswith("goal_"))
async def goal_handler(query: CallbackQuery):
    goal_map = {
        "goal_passive": "–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ üí∏",
        "goal_house": "–î–æ–º üè†",
        "goal_car": "–ú–∞—à–∏–Ω–∞ üöó",
        "goal_growth": "–ü—Ä–∏—É–º–Ω–æ–∂–∏—Ç—å –∫–∞–ø–∏—Ç–∞–ª üìä"
    }
    user_data[query.from_user.id]["goal"] = goal_map[query.data]
    # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å
    sums_initial = ["10 000 ‚ÇΩ","20 000 ‚ÇΩ","30 000 ‚ÇΩ","40 000 ‚ÇΩ","50 000 ‚ÇΩ","100 000 ‚ÇΩ","250 000 ‚ÇΩ","500 000 ‚ÇΩ","1 000 000 ‚ÇΩ"]
    keyboard_rows = []
    for i in range(0, len(sums_initial), 3):
        row = [InlineKeyboardButton(text=s, callback_data=f"initial_{s}") for s in sums_initial[i:i+3]]
        keyboard_rows.append(row)
    kb_initial = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    await query.message.edit_text("–°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –≤—ã –≥–æ—Ç–æ–≤—ã –≤–ª–æ–∂–∏—Ç—å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ?", reply_markup=kb_initial)

# === –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å ===
@dp.callback_query(F.data.startswith("initial_"))
async def initial_handler(query: CallbackQuery):
    user_data[query.from_user.id]["initial_sum"] = query.data.replace("initial_", "")
    sums_monthly = ["0 ‚ÇΩ","10 000 ‚ÇΩ","20 000 ‚ÇΩ","30 000 ‚ÇΩ","40 000 ‚ÇΩ","50 000 ‚ÇΩ","100 000 ‚ÇΩ"]
    keyboard_rows = []
    for i in range(0, len(sums_monthly), 3):
        row = [InlineKeyboardButton(text=s, callback_data=f"sum_{s}") for s in sums_monthly[i:i+3]]
        keyboard_rows.append(row)
    kb_monthly = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    await query.message.edit_text("–°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –≤—ã –≥–æ—Ç–æ–≤—ã –≤–∫–ª–∞–¥—ã–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü?", reply_markup=kb_monthly)

# === –†–∞—Å—á–µ—Ç –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞ ===
@dp.callback_query(F.data.startswith("sum_"))
async def sum_handler(query: CallbackQuery):
    user_data[query.from_user.id]["sum"] = query.data.replace("sum_","")
    initial = int(user_data[query.from_user.id]["initial_sum"].replace("‚ÇΩ","").replace(" ",""))
    monthly = int(user_data[query.from_user.id]["sum"].replace("‚ÇΩ","").replace(" ",""))
    rate = 0.09
    periods = [1,3,6,12,24]
    balance = 0
    forecast_text = ""
    for month in periods:
        invest_this_month = initial if month==1 else monthly
        balance += invest_this_month
        passive = balance*rate
        balance += passive
        forecast_text += f"üìÖ –ú–µ—Å—è—Ü {month}\nüíµ –í–ª–æ–∂–µ–Ω–∏–µ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {invest_this_month:,} ‚ÇΩ\n"
        forecast_text += f"–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥: {int(passive):,} ‚ÇΩ (9%)\n–ë–∞–ª–∞–Ω—Å: {int(balance):,} ‚ÇΩ\n\n"
    kb_offer = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –æ—Ñ–µ—Ä—Ç–æ–π üìÑ", callback_data="offer_read")]
    ])
    await query.message.edit_text(forecast_text, reply_markup=kb_offer)

# === –û–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ —Å –æ—Ñ–µ—Ä—Ç–æ–π ===
@dp.callback_query(F.data=="offer_read")
async def offer_handler(query: CallbackQuery):
    await bot.send_document(chat_id=query.from_user.id, document=OFFER_PDF_FILE_ID)
    kb_accept = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å –æ—Ñ–µ—Ä—Ç–æ–π ‚úÖ", callback_data="offer_accept")]
    ])
    await query.message.answer("–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –æ—Ñ–µ—Ä—Ç—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ:", reply_markup=kb_accept)

# === –°–æ–≥–ª–∞—Å–∏–µ –∏ –≤—ã–±–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–∞ ===
@dp.callback_query(F.data=="offer_accept")
async def offer_accept_handler(query: CallbackQuery):
    kb_contact = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Telegram", callback_data="contact_telegram"),
         InlineKeyboardButton(text="Email", callback_data="contact_email")],
        [InlineKeyboardButton(text="–¢–µ–ª–µ—Ñ–æ–Ω", callback_data="contact_phone"),
         InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="contact_other")]
    ])
    await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ —Å –ª–∏—á–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º:", reply_markup=kb_contact)

@dp.callback_query(F.data.startswith("contact_"))
async def contact_method_handler(query: CallbackQuery):
    method = query.data.replace("contact_","")
    user_data[query.from_user.id]["contact_method"] = method
    if method=="telegram":
        username = user_data[query.from_user.id].get("username","‚Äî")
        if username=="‚Äî":
            await query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ username –≤ Telegram. –ù–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏.")
        else:
            user_data[query.from_user.id]["contact"] = f"@{username}"
            await send_to_admin(query.from_user.id)
            await query.message.answer("–û—Ç–ª–∏—á–Ω–æ! –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É.")
    else:
        await query.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫ —Å –≤–∞–º–∏ –ª—É—á—à–µ —Å–≤—è–∑–∞—Ç—å—Å—è:")
        # —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É

async def send_to_admin(user_id):
    data = user_data.get(user_id,{})
    text = (
        f"üî• –ù–æ–≤—ã–π –∏–Ω–≤–µ—Å—Ç–æ—Ä!\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{data.get('username','‚Äî')}\n"
        f"–ò–º—è: {data.get('full_name','‚Äî')}\n"
        f"ID: {user_id}\n\n"
        f"üìå –û–ø—ã—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {data.get('experience','‚Äî')}\n"
        f"üìå –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {data.get('discipline','‚Äî')}\n"
        f"üìå –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å: {data.get('quiz_score','0')}/{len(quiz_questions)}\n"
        f"üéØ –¶–µ–ª—å: {data.get('goal','‚Äî')}\n"
        f"üí∞ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å: {data.get('initial_sum','‚Äî')}\n"
        f"üíµ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è: {data.get('sum','‚Äî')}\n"
        f"üìå –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥: {data.get('contact_method','‚Äî')}\n"
        f"üìå –ö–æ–Ω—Ç–∞–∫—Ç: {data.get('contact','‚Äî')}\n"
    )
    await bot.send_message(chat_id=ADMIN_ID,text=text)

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    await dp.start_polling(bot)

if __name__=="__main__":
    asyncio.run(main())
