import logging
import asyncio
import os
import random
from aiogram import Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
import aiohttp
from bs4 import BeautifulSoup
from aiogram.client.bot import Bot as AiogramBot
from aiogram.client.bot import DefaultBotProperties

# –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è API_Token
API_TOKEN = os.getenv("API_Token")
if not API_TOKEN:
    raise ValueError("API_Token –Ω–µ –∑–∞–¥–∞–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å —Ç–æ–∫–µ–Ω–æ–º.")

logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å parse_mode —á–µ—Ä–µ–∑ DefaultBotProperties
bot = AiogramBot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)

dp = Dispatcher(storage=MemoryStorage())

# –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é (—Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã)
button_info = KeyboardButton(text="üìà –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—Ä–∏–ø—Ç–µ")
button_tips = KeyboardButton(text="üí° –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã")
button_motivation = KeyboardButton(text="üî• –ú–æ—Ç–∏–≤–∞—Ü–∏—è")
button_faq = KeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
button_profit = KeyboardButton(text="üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏")
button_news = KeyboardButton(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏ –∫—Ä–∏–ø—Ç—ã")

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [button_info, button_tips],
        [button_motivation, button_faq],
        [button_profit, button_news]
    ],
    resize_keyboard=True
)

# –î–∞–Ω–Ω—ã–µ
crypto_info = {
    "Bitcoin": "Bitcoin ‚Äî –ø–µ—Ä–≤–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞, —Å–æ–∑–¥–∞–Ω–Ω–∞—è –≤ 2009 –≥–æ–¥—É. BTC –æ–≥—Ä–∞–Ω–∏—á–µ–Ω 21 –º–ª–Ω –º–æ–Ω–µ—Ç.",
    "Ethereum": "Ethereum ‚Äî –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ ETH.",
    "Altcoins": "Altcoins ‚Äî –≤—Å–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, –∫—Ä–æ–º–µ Bitcoin. –ù–∞–ø—Ä–∏–º–µ—Ä, Litecoin, Cardano, Solana."
}

investment_tips = [
    "–ù–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π –±–æ–ª—å—à–µ, —á–µ–º –≥–æ—Ç–æ–≤ –ø–æ—Ç–µ—Ä—è—Ç—å.",
    "–î–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä—É–π –ø–æ—Ä—Ç—Ñ–µ–ª—å, –Ω–µ –¥–µ—Ä–∂–∏ –≤—Å—ë –≤ –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç–µ.",
    "–ò–∑—É—á–∏ –ø—Ä–æ–µ–∫—Ç –ø–µ—Ä–µ–¥ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º: –∫–æ–º–∞–Ω–¥–∞, —Ü–µ–ª—å, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è.",
    "–°–ª–µ–¥–∏ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ —Ç—Ä–µ–Ω–¥–∞–º–∏ —Ä—ã–Ω–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç."
]

motivation_quotes = [
    "–ö—Ç–æ —Ä–∏—Å–∫—É–µ—Ç ‚Äî —Ç–æ—Ç –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç. –ù–∞—á–Ω–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –∫—Ä–∏–ø—Ç—É —Å–µ–≥–æ–¥–Ω—è!",
    "–õ—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –±—ã–ª–æ –≤—á–µ—Ä–∞, –≤—Ç–æ—Ä–æ–µ –ª—É—á—à–µ–µ ‚Äî —Å–µ–π—á–∞—Å.",
    "–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ –∏ –∑–Ω–∞–Ω–∏—è —Å–æ–∑–¥–∞—é—Ç –±–æ–≥–∞—Ç—Å—Ç–≤–æ.",
    "–ù–µ –±–æ–π—Å—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —à–∞–≥–æ–≤ ‚Äî –æ–Ω–∏ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –±–æ–ª—å—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º."
]

faq_answers = {
    "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞?": "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ ‚Äî —ç—Ç–æ —Ü–∏—Ñ—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –±–ª–æ–∫—á–µ–π–Ω.",
    "–ö–∞–∫ –Ω–∞—á–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å?": "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –Ω–∞–¥—ë–∂–Ω—É—é –±–∏—Ä–∂—É, —Å–æ–∑–¥–∞–π –∫–æ—à–µ–ª—ë–∫ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π –Ω–µ–±–æ–ª—å—à–∏–µ —Å—É–º–º—ã.",
    "–ö–∞–∫–∞—è –∫—Ä–∏–ø—Ç–∞ —Å–∞–º–∞—è –Ω–∞–¥—ë–∂–Ω–∞—è?": "Bitcoin –∏ Ethereum —Å—á–∏—Ç–∞—é—Ç—Å—è –Ω–∞–∏–±–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω—ã–º–∏ –∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏."
}

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏)
user_states = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command(commands=["start"]))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∫—Ä–∏–ø—Ç–æ-–±–æ—Ç üöÄ\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏.\n"
        "–í—ã–±–∏—Ä–∞–π –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:",
        reply_markup=main_menu
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–Ω–æ–ø–æ–∫
@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    text = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ø—Ä–∏–±—ã–ª–∏
    if user_states.get(user_id) == "awaiting_profit_input":
        try:
            parts = [float(x.strip()) for x in text.split(",")]
            if len(parts) != 3:
                raise ValueError
            amount, buy_price, current_price = parts
            profit = (current_price - buy_price) * amount
            await message.answer(f"üí∞ –í–∞—à–∞ –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫: {profit:.2f} —É.–µ.")
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏, —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞")
        user_states[user_id] = None
        return

    if text == "üìà –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—Ä–∏–ø—Ç–µ":
        info_text = "\n\n".join([f"<b>{k}</b>: {v}" for k, v in crypto_info.items()])
        await message.answer(info_text)

    elif text == "üí° –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã":
        tip = random.choice(investment_tips)
        await message.answer(f"üí° –°–æ–≤–µ—Ç:\n{tip}")

    elif text == "üî• –ú–æ—Ç–∏–≤–∞—Ü–∏—è":
        quote = random.choice(motivation_quotes)
        await message.answer(f"üî• –ú–æ—Ç–∏–≤–∞—Ü–∏—è:\n{quote}")

    elif text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –∫—Ä–∏–ø—Ç—É, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!")

    elif text == "üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç, —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏, —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞.\n–ü—Ä–∏–º–µ—Ä: 2, 20000, 25000")
        user_states[user_id] = "awaiting_profit_input"

    elif text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏ –∫—Ä–∏–ø—Ç—ã":
        news = await fetch_crypto_news()
        await message.answer(news, disable_web_page_preview=True)

    else:
        answer = faq_answers.get(text)
        if answer:
            await message.answer(answer)
        else:
            await message.answer(
                "–ò–∑–≤–∏–Ω–∏, —è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å üòÖ\n"
                "–ü–æ–ø—Ä–æ–±—É–π –∑–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.",
                reply_markup=main_menu
            )

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π —Å CoinTelegraph
async def fetch_crypto_news():
    url = "https://ru.cointelegraph.com/"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                html = await resp.text()
                soup = BeautifulSoup(html, "html.parser")
                articles = soup.find_all("a", class_="post-card-inline__title-link")[:5]
                if not articles:
                    return "–ù–æ–≤–æ—Å—Ç–∏ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
                news_text = "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∫—Ä–∏–ø—Ç—ã:\n\n"
                for a in articles:
                    title = a.get_text(strip=True)
                    link = a["href"]
                    if not link.startswith("http"):
                        link = "https://ru.cointelegraph.com" + link
                    news_text += f"- <a href='{link}'>{title}</a>\n"
                return news_text
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}"

# –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è
async def daily_motivation():
    while True:
        for chat_id in user_states.keys():
            quote = random.choice(motivation_quotes)
            try:
                await bot.send_message(chat_id, f"üî• –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è:\n{quote}")
            except:
                pass
        await asyncio.sleep(24 * 60 * 60)  # —Ä–∞–∑ –≤ 24 —á–∞—Å–∞

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    asyncio.create_task(daily_motivation())
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
