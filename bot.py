import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.client.bot import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

TOKEN = "8473772441:AAHpXfxOxR-OL6e3GSfh4xvgiDdykQhgTus"

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    keyboard = [
        [KeyboardButton(text="üìä –û–±—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∞"), KeyboardButton(text="üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")],
        [KeyboardButton(text="üí∞ –ì–æ—Ç–æ–≤ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å"), KeyboardButton(text="üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–≥–æ–≤–æ—Ä–∞ –æ—Ñ–µ—Ä—Ç—ã")],
        [KeyboardButton(text="‚ú® –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ–µ –≤–æ–∑–º–æ–∂–Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä—è —Ä—ã—á–∞–≥–∞–º")],
        [KeyboardButton(text="–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã‚ùì")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# Inline –∫–Ω–æ–ø–∫–∞ "–í –º–µ–Ω—é"
def inline_back_to_menu():
    keyboard = [
        [InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_answers = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    file_id = "BAACAgQAAxkDAAIEgGi5kTsunsNKCxSgT62lGkOro6iLAAI8KgACIJ7QUfgrP_Y9_DJKNgQ"
    await message.answer_video(video=file_id, reply_markup=inline_back_to_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–∫–∏ "–í –º–µ–Ω—é"
@dp.callback_query()
async def callbacks(callback: types.CallbackQuery):
    if callback.data == "back_to_menu":
        await callback.message.answer("–°–¥–µ–ª–∞–π —Å–≤–æ–π –≤—ã–±–æ—Ä", reply_markup=main_menu())
        await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    text = message.text

    # --- –ö–Ω–æ–ø–∫–∞ "üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç" ---
    if text == "üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç":
        user_answers[user_id] = {}
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton("–ú–∞—à–∏–Ω–∞"), KeyboardButton("–î–æ–º"), KeyboardButton("–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥")],
                [KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
            ],
            resize_keyboard=True
        )
        await message.answer("–ö–∞–∫–æ–≤–∞ —Ç–≤–æ—è —Ü–µ–ª—å?", reply_markup=keyboard)
        return

    # --- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Ç–µ—Å—Ç–µ ---
    if user_id in user_answers:
        answers = user_answers[user_id]

        # --- –®–∞–≥ 1: –≤—ã–±–æ—Ä —Ü–µ–ª–∏ ---
        if "goal" not in answers:
            if text == "‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
                del user_answers[user_id]
                await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=main_menu())
                return
            answers["goal"] = text

            if text == "–ú–∞—à–∏–Ω–∞":
                keyboard = ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton("100 000—Ä"), KeyboardButton("500 000—Ä"), KeyboardButton("1 000 000—Ä")],
                        [KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
                    ],
                    resize_keyboard=True
                )
                await message.answer("–ö–∞–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—à–∏–Ω—ã?", reply_markup=keyboard)
            elif text == "–î–æ–º":
                keyboard = ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton("3 000 000—Ä"), KeyboardButton("5 000 000—Ä"), KeyboardButton("15 000 000—Ä")],
                        [KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
                    ],
                    resize_keyboard=True
                )
                await message.answer("–ö–∞–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–º–∞?", reply_markup=keyboard)
            elif text == "–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥":
                keyboard = ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton("100 000—Ä"), KeyboardButton("500 000—Ä"), KeyboardButton("1 000 000—Ä")],
                        [KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
                    ],
                    resize_keyboard=True
                )
                await message.answer("–°–∫–æ–ª—å–∫–æ –≤ –º–µ—Å—è—Ü —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å?", reply_markup=keyboard)
            return

        # --- –®–∞–≥ 2: —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—à–∏–Ω—ã/–¥–æ–º–∞ –∏–ª–∏ –∂–µ–ª–∞–µ–º—ã–π –¥–æ—Ö–æ–¥ ---
        if "goal_value" not in answers:
            if text == "‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
                del user_answers[user_id]
                await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=main_menu())
                return
            answers["goal_value"] = text

            # –í–æ–ø—Ä–æ—Å –ø—Ä–æ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton("10 000—Ä"), KeyboardButton("20 000—Ä"), KeyboardButton("30 000—Ä")],
                    [KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
                ],
                resize_keyboard=True
            )
            await message.answer("–°–∫–æ–ª—å–∫–æ –≤—ã –≥–æ—Ç–æ–≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –º–µ—Å—è—Ü?", reply_markup=keyboard)
            return

        # --- –®–∞–≥ 3: –º–µ—Å—è—á–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏ —Ä–∞—Å—á–µ—Ç ---
        if "monthly_invest" not in answers:
            if text == "‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
                del user_answers[user_id]
                await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=main_menu())
                return
            answers["monthly_invest"] = text

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
            goal_value = int(answers["goal_value"].replace("—Ä", "").replace(" ", ""))
            monthly = int(answers["monthly_invest"].replace("—Ä", "").replace(" ", ""))
            annual_return = 1.35  # 135% –≥–æ–¥–æ–≤—ã—Ö

            # –†–∞—Å—á–µ—Ç –º–µ—Å—è—Ü–µ–≤ –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ —Å —É—á–µ—Ç–æ–º —Å–ª–æ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
            total = 0
            months = 0
            while total < goal_value:
                total = (total + monthly) * (annual_return ** (1/12))
                months += 1

            years = months // 12
            remaining_months = months % 12

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏
            if answers["goal"] == "–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥":
                result_text = (
                    f"–° –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –ò–ò-–±–æ—Ç–∞, –ø—Ä–∏ –≤–∞—à–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö {monthly}‚ÇΩ/–º–µ—Å, "
                    f"–≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ {goal_value}‚ÇΩ –≤ –º–µ—Å—è—Ü –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {years} –ª–µ—Ç –∏ {remaining_months} –º–µ—Å—è—Ü–µ–≤."
                )
            elif answers["goal"] == "–ú–∞—à–∏–Ω–∞":
                result_text = (
                    f"–° –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –ò–ò-–±–æ—Ç–∞, –ø—Ä–∏ –≤–∞—à–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö {monthly}‚ÇΩ/–º–µ—Å, "
                    f"–≤—ã —Å–º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –º–∞—à–∏–Ω—É —Å—Ç–æ–∏–º–æ—Å—Ç—å—é {goal_value}‚ÇΩ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {years} –ª–µ—Ç –∏ {remaining_months} –º–µ—Å—è—Ü–µ–≤."
                )
            elif answers["goal"] == "–î–æ–º":
                result_text = (
                    f"–° –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –ò–ò-–±–æ—Ç–∞, –ø—Ä–∏ –≤–∞—à–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö {monthly}‚ÇΩ/–º–µ—Å, "
                    f"–≤—ã —Å–º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –¥–æ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å—é {goal_value}‚ÇΩ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {years} –ª–µ—Ç –∏ {remaining_months} –º–µ—Å—è—Ü–µ–≤."
                )

            await message.answer(result_text, reply_markup=main_menu())
            del user_answers[user_id]
            return

    # --- –î—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
    if text == "üìä –û–±—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∞":
        await message.answer("–†–∞–∑–¥–µ–ª '–û–±—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∞' –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.", reply_markup=main_menu())
    elif text == "üí∞ –ì–æ—Ç–æ–≤ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å":
        await message.answer("https://traiex.gitbook.io/user-guides/ru/kak-zaregistrirovatsya-na-traiex", reply_markup=main_menu())
    elif text == "üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–≥–æ–≤–æ—Ä–∞ –æ—Ñ–µ—Ä—Ç—ã":
        await message.answer("–î–æ–∫—É–º–µ–Ω—Ç –æ—Ñ–µ—Ä—Ç—ã –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.", reply_markup=main_menu())
    elif text == "‚ú® –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ–µ –≤–æ–∑–º–æ–∂–Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä—è —Ä—ã—á–∞–≥–∞–º":
        await message.answer("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.", reply_markup=main_menu())
    elif text == "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã‚ùì":
        await message.answer("FAQ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.", reply_markup=main_menu())
    elif text == "‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=main_menu())
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é üëá", reply_markup=main_menu())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
