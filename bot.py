import logging
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

logging.basicConfig(level=logging.INFO)

# === –ö–æ–Ω—Ñ–∏–≥ ===
BOT_TOKEN = "8473772441:AAHpXfxOxR-OL6e3GSfh4xvgiDdykQhgTus"
ADMIN_ID = -1003081706651  # –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –¥–ª—è –ª–∏–¥–æ–≤

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# === –°—Ç–∞—Ä—Ç ===
@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_data[message.from_user.id] = {}

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞, —Ö–æ—á—É —É–∑–Ω–∞—Ç—å! üöÄ", callback_data="warmup_yes")],
        [InlineKeyboardButton(text="–ù–µ—Ç, –ø—Ä–æ—Å—Ç–æ —Ö–æ—á—É –∏–¥–µ–∏ üí°", callback_data="warmup_no")]
    ])
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n"
        "–Ø —Ç–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –§–∏–Ω–∞–Ω—Å–æ–≤–∏—á. üíº\n"
        "–¢—ã –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –∑–∞–¥—É–º—ã–≤–∞–ª—Å—è, –∫–∞–∫ –±–æ–≥–∞—Ç—ã–µ –ª—é–¥–∏ –∑–∞—Å—Ç–∞–≤–ª—è—é—Ç –¥–µ–Ω—å–≥–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —Å–µ–±—è?",
        reply_markup=kb
    )

# === Warm-up ===
@dp.callback_query(F.data.startswith("warmup_"))
async def warmup_handler(query: CallbackQuery):
    user_data[query.from_user.id]["warmup"] = query.data
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞, —É–∂–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É—é üìà", callback_data="experience_yes")],
        [InlineKeyboardButton(text="–ù–µ—Ç, —Ö–æ—á—É –Ω–∞—á–∞—Ç—å üü¢", callback_data="experience_no")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–æ–≤–∞–ª, –Ω–æ –±—ã–ª–∏ –Ω–µ—É–¥–∞—á–∏ ‚ùå", callback_data="experience_fail")]
    ])
    await query.message.edit_text(
        "–û—Ç–ª–∏—á–Ω–æ! –ê —É —Ç–µ–±—è –µ—Å—Ç—å –æ–ø—ã—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è?",
        reply_markup=kb
    )

# === –û–ø—ã—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===
@dp.callback_query(F.data.startswith("experience_"))
async def experience_handler(query: CallbackQuery):
    user_data[query.from_user.id]["experience"] = query.data.replace("experience_", "")
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ üí∏", callback_data="goal_passive"),
         InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –¥–æ–º üè†", callback_data="goal_house")],
        [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –º–∞—à–∏–Ω—É üöó", callback_data="goal_car"),
         InlineKeyboardButton(text="–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—É–º–Ω–æ–∂–∏—Ç—å –∫–∞–ø–∏—Ç–∞–ª üìä", callback_data="goal_growth")]
    ])
    await query.message.edit_text(
        "–ö–∞–∫–∞—è —Ç–≤–æ—è –≥–ª–∞–≤–Ω–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Ü–µ–ª—å?",
        reply_markup=kb
    )

# === –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Ü–µ–ª—å ===
@dp.callback_query(F.data.startswith("goal_"))
async def goal_handler(query: CallbackQuery):
    goal_map = {
        "goal_passive": "–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ üí∏",
        "goal_house": "–î–æ–º üè†",
        "goal_car": "–ú–∞—à–∏–Ω–∞ üöó",
        "goal_growth": "–ü—Ä–∏—É–º–Ω–æ–∂–∏—Ç—å –∫–∞–ø–∏—Ç–∞–ª üìä"
    }
    user_data[query.from_user.id]["goal"] = goal_map[query.data]

    # –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å ‚Äî –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å
    sums_initial = ["10 000 ‚ÇΩ", "20 000 ‚ÇΩ", "30 000 ‚ÇΩ", "40 000 ‚ÇΩ", "50 000 ‚ÇΩ", "100 000 ‚ÇΩ", "250 000 ‚ÇΩ", "500 000 ‚ÇΩ", "1 000 000 ‚ÇΩ"]
    kb_initial = InlineKeyboardMarkup(inline_keyboard=[
        sums_initial[i:i+3] for i in range(0, len(sums_initial), 3)
    ])
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–Ω–æ–ø–∫–∏
    for row in kb_initial.inline_keyboard:
        for idx, val in enumerate(row):
            row[idx] = InlineKeyboardButton(text=val, callback_data=f"initial_{val}")

    await query.message.edit_text(
        f"–°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ —Ç—ã –≥–æ—Ç–æ–≤ –≤–ª–æ–∂–∏—Ç—å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ –¥–ª—è —Ü–µ–ª–∏ ¬´{goal_map[query.data]}¬ª?",
        reply_markup=kb_initial
    )

# === –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å ===
@dp.callback_query(F.data.startswith("initial_"))
async def initial_handler(query: CallbackQuery):
    user_data[query.from_user.id]["initial_sum"] = query.data.replace("initial_", "")

    # –í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî –µ–∂–µ–º–µ—Å—è—á–Ω–æ–µ –≤–ª–æ–∂–µ–Ω–∏–µ
    sums_monthly = ["0 ‚ÇΩ", "10 000 ‚ÇΩ", "20 000 ‚ÇΩ", "30 000 ‚ÇΩ", "40 000 ‚ÇΩ", "50 000 ‚ÇΩ", "100 000 ‚ÇΩ"]
    kb_monthly = InlineKeyboardMarkup(inline_keyboard=[
        sums_monthly[i:i+3] for i in range(0, len(sums_monthly), 3)
    ])
    for row in kb_monthly.inline_keyboard:
        for idx, val in enumerate(row):
            row[idx] = InlineKeyboardButton(text=val, callback_data=f"sum_{val}")

    await query.message.edit_text(
        "–°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ —Ç—ã –≥–æ—Ç–æ–≤ –≤–∫–ª–∞–¥—ã–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü –¥–ª—è —Ü–µ–ª–∏?",
        reply_markup=kb_monthly
    )

# === –°—É–º–º–∞ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –≤–ª–æ–∂–µ–Ω–∏—è –∏ —Ä–∞—Å—á–µ—Ç Trading Bot —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º ===
@dp.callback_query(F.data.startswith("sum_"))
async def sum_handler(query: CallbackQuery):
    user_data[query.from_user.id]["sum"] = query.data.replace("sum_", "")

    initial_str = user_data[query.from_user.id]["initial_sum"].replace("‚ÇΩ", "").replace(" ", "")
    monthly_str = query.data.replace("sum_", "").replace("‚ÇΩ", "").replace(" ", "")
    initial_sum = int(initial_str) if initial_str.isdigit() else 0
    monthly_invest = int(monthly_str) if monthly_str.isdigit() else 0

    rate = 0.09
    months_to_show = [4, 6, 12, 24]

    balance = initial_sum
    invested_total = initial_sum
    forecast_text = f"üí° –ü—Ä–æ–≥–Ω–æ–∑ Trading Bot –ø—Ä–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º –≤–∑–Ω–æ—Å–µ {initial_sum:,} ‚ÇΩ –∏ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–º –≤–ª–æ–∂–µ–Ω–∏–∏ {monthly_invest:,} ‚ÇΩ (—Å—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å 9%/–º–µ—Å)\n\n"

    for month in range(1, max(months_to_show)+1):
        balance = balance * (1 + rate) + monthly_invest
        invested_total += monthly_invest
        passive_income = balance - invested_total
        if month in months_to_show:
            bar_length = 10
            percent = min(int(passive_income / max(1, invested_total) * bar_length), bar_length)
            bar = "üü©" * percent + "‚¨ú" * (bar_length - percent)
            forecast_text += (
                f"üìÖ –ß–µ—Ä–µ–∑ {month} –º–µ—Å:\n"
                f"  –í–ª–æ–∂–µ–Ω–æ: {invested_total:,} ‚ÇΩ\n"
                f"  –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥: {int(passive_income):,} ‚ÇΩ {bar}\n"
                f"  –ë–∞–ª–∞–Ω—Å: {int(balance):,} ‚ÇΩ\n\n"
            )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–õ—é–±–ª—é —Ä–∏—Å–∫ üöÄ", callback_data="risk_high"),
         InlineKeyboardButton(text="–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å üõ°Ô∏è", callback_data="risk_low"),
         InlineKeyboardButton(text="–ö–æ–º–±–∏–Ω–∏—Ä—É—é üîÑ", callback_data="risk_medium")]
    ])

    await query.message.edit_text(
        forecast_text + "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, –∫–∞–∫ —Ç—ã –æ—Ç–Ω–æ—Å–∏—à—å—Å—è –∫ —Ä–∏—Å–∫—É:",
        reply_markup=kb
    )

# === –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ä–∏—Å–∫—É ===
@dp.callback_query(F.data.startswith("risk_"))
async def risk_handler(query: CallbackQuery):
    risk_map = {
        "risk_high": "–õ—é–±–ª—é —Ä–∏—Å–∫ üöÄ",
        "risk_low": "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å üõ°Ô∏è",
        "risk_medium": "–ö–æ–º–±–∏–Ω–∏—Ä—É—é üîÑ"
    }
    user_data[query.from_user.id]["risk"] = risk_map[query.data]

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º üë®‚Äçüíº", callback_data="contact_expert")]
    ])

    await query.message.edit_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢—ã –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤. –Ø –º–æ–≥—É —Å–≤—è–∑–∞—Ç—å —Ç–µ–±—è —Å –Ω–∞—à–∏–º —ç–∫—Å–ø–µ—Ä—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–π –ø—É—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.",
        reply_markup=kb
    )

# === –°–≤—è–∑—å —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º ===
@dp.callback_query(F.data == "contact_expert")
async def contact_handler(query: CallbackQuery):
    data = user_data.get(query.from_user.id, {})
    await query.message.edit_text(
        "–°—É–ø–µ—Ä üéâ –Ø –ø–µ—Ä–µ–¥–∞–ª —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞—à–µ–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –æ–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π üë®‚Äçüíª"
    )
    await bot.send_message(
        chat_id=ADMIN_ID,
        text=(f"üî• –ù–æ–≤—ã–π –ª–∏–¥!\n\n"
              f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{query.from_user.username}\n"
              f"–ò–º—è: {query.from_user.full_name}\n"
              f"ID: {query.from_user.id}\n\n"
              f"üìå –û–ø—ã—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {data.get('experience', '‚Äî')}\n"
              f"üéØ –¶–µ–ª—å: {data.get('goal', '‚Äî')}\n"
              f"üí∞ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å: {data.get('initial_sum', '‚Äî')}\n"
              f"üíµ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è: {data.get('sum', '‚Äî')}\n"
              f"‚ö° –†–∏—Å–∫: {data.get('risk', '‚Äî')}\n")
    )

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
