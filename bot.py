import logging
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

logging.basicConfig(level=logging.INFO)

# === –ö–æ–Ω—Ñ–∏–≥ ===
BOT_TOKEN = "YOUR_BOT_TOKEN"
ADMIN_ID = -1003081706651
OFFER_PDF_FILE_ID = "BQACAgQAAxkBAAIFOGi6vNHLzH9IyJt0q7_V4y73FcdrAAKXGwACeDjZUSdnK1dqaQoPNgQ"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# === –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
user_data = {}

# === Warm-up ===
@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_data[message.from_user.id] = {}
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞, —Ö–æ—á—É —É–∑–Ω–∞—Ç—å! üöÄ", callback_data="warmup_yes")],
        [InlineKeyboardButton(text="–ù–µ—Ç, –ø—Ä–æ—Å—Ç–æ —Ö–æ—á—É –∏–¥–µ–∏ üí°", callback_data="warmup_no")]
    ])
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n"
        "–Ø —Ç–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫. üíº\n"
        "–¢—ã –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –∑–∞–¥—É–º—ã–≤–∞–ª—Å—è, –∫–∞–∫ –±–æ–≥–∞—Ç—ã–µ –ª—é–¥–∏ –∑–∞—Å—Ç–∞–≤–ª—è—é—Ç –¥–µ–Ω—å–≥–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —Å–µ–±—è?",
        reply_markup=kb
    )

@dp.callback_query(F.data.startswith("warmup_"))
async def warmup_handler(query: CallbackQuery):
    user_data[query.from_user.id]["warmup"] = query.data
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞, —É–∂–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É—é üìà", callback_data="experience_yes")],
        [InlineKeyboardButton(text="–ù–µ—Ç, —Ö–æ—á—É –Ω–∞—á–∞—Ç—å üü¢", callback_data="experience_no")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–æ–≤–∞–ª, –Ω–æ –±—ã–ª–∏ –Ω–µ—É–¥–∞—á–∏ ‚ùå", callback_data="experience_fail")]
    ])
    await query.message.edit_text("–ê —É —Ç–µ–±—è –µ—Å—Ç—å –æ–ø—ã—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è?", reply_markup=kb)

@dp.callback_query(F.data.startswith("experience_"))
async def experience_handler(query: CallbackQuery):
    user_data[query.from_user.id]["experience"] = query.data.replace("experience_", "")
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞, –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ä–æ–≤–∞–Ω üìä", callback_data="discipline_yes")],
        [InlineKeyboardButton(text="–ù–µ —Å–æ–≤—Å–µ–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ä–æ–≤–∞–Ω ‚ö†Ô∏è", callback_data="discipline_no")]
    ])
    await query.message.edit_text("–¢—ã —Å–ª–µ–¥–∏—à—å –∑–∞ —Å–≤–æ–∏–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏?", reply_markup=kb)

# === –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ ===
fingram_questions = [
    {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥?", "options": ["–î–æ—Ö–æ–¥ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã", "–ó–∞—Ä–ø–ª–∞—Ç–∞", "–ë–æ–Ω—É—Å—ã"], "correct": 0},
    {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è?", "options": ["–í–ª–æ–∂–µ–Ω–∏–µ –≤ —Ä–∞–∑–Ω—ã–µ –∞–∫—Ç–∏–≤—ã", "–¢–æ–ª—å–∫–æ –∞–∫—Ü–∏–∏", "–ù–µ –≤–∫–ª–∞–¥—ã–≤–∞—Ç—å—Å—è"], "correct": 0},
    {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Ä–∏—Å–∫?", "options": ["–ü–æ—Ç–µ—Ä—è —á–∞—Å—Ç–∏ –∏–ª–∏ –≤—Å–µ—Ö –≤–ª–æ–∂–µ–Ω–∏–π", "–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å", "–ë–µ—Å–ø—Ä–æ–∏–≥—Ä—ã—à–Ω–∞—è —Å—Ç–∞–≤–∫–∞"], "correct": 0},
    {"question": "–ß—Ç–æ –æ–±—ã—á–Ω–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—Ç –≤—ã—Å–æ–∫—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å?", "options": ["–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫", "–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Ö–æ–¥", "–ú–∞–ª—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å"], "correct": 0},
    {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å?", "options": ["–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –±—ã—Å—Ç—Ä–æ –ø—Ä–æ–¥–∞—Ç—å –∞–∫—Ç–∏–≤", "–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π", "–ù–∞–ª–æ–≥ –Ω–∞ –ø—Ä–∏–±—ã–ª—å"], "correct": 0},
    {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –∏–Ω—Ñ–ª—è—Ü–∏—è?", "options": ["–†–æ—Å—Ç —Ü–µ–Ω –∏ —Å–Ω–∏–∂–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏", "–°–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω", "–†–æ—Å—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã"], "correct": 0},
    {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –æ–±–ª–∏–≥–∞—Ü–∏—è?", "options": ["–î–æ–ª–≥–æ–≤–∞—è —Ü–µ–Ω–Ω–∞—è –±—É–º–∞–≥–∞", "–ê–∫—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–∏", "–î–µ–ø–æ–∑–∏—Ç"], "correct": 0},
    {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –∞–∫—Ü–∏—è?", "options": ["–î–æ–ª—è –≤ –∫–æ–º–ø–∞–Ω–∏–∏", "–î–µ–ø–æ–∑–∏—Ç", "–ö—Ä–µ–¥–∏—Ç"], "correct": 0},
    {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ ETF?", "options": ["–ë–∏—Ä–∂–µ–≤–æ–π —Ñ–æ–Ω–¥", "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –≤–∫–ª–∞–¥", "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞"], "correct": 0},
    {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è?", "options": ["–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏", "–ó–∞—Ä–ø–ª–∞—Ç–∞", "–ù–∞–ª–æ–≥"], "correct": 0}
]

@dp.callback_query(F.data.startswith("discipline_"))
async def discipline_handler(query: CallbackQuery):
    user_data[query.from_user.id]["discipline"] = query.data.replace("discipline_", "")
    user_data[query.from_user.id]["quiz_index"] = 0
    user_data[query.from_user.id]["quiz_score"] = 0
    await send_fingram_question(query.from_user.id, query.message)

async def send_fingram_question(user_id, message):
    index = user_data[user_id]["quiz_index"]
    q = fingram_questions[index]
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=opt, callback_data=f"quiz_{index}_{i}")] for i, opt in enumerate(q["options"])
    ])
    await message.edit_text(f"{q['question']}", reply_markup=kb)

@dp.callback_query(F.data.startswith("quiz_"))
async def quiz_handler(query: CallbackQuery):
    parts = query.data.split("_")
    q_index, opt_index = int(parts[1]), int(parts[2])
    if opt_index == fingram_questions[q_index]["correct"]:
        user_data[query.from_user.id]["quiz_score"] += 1
    user_data[query.from_user.id]["quiz_index"] += 1
    if user_data[query.from_user.id]["quiz_index"] < len(fingram_questions):
        await send_fingram_question(query.from_user.id, query.message)
    else:
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤–∑–Ω–æ—Å–∞
        sums_initial = ["10 000 ‚ÇΩ", "20 000 ‚ÇΩ", "30 000 ‚ÇΩ", "40 000 ‚ÇΩ", "50 000 ‚ÇΩ",
                        "100 000 ‚ÇΩ", "250 000 ‚ÇΩ", "500 000 ‚ÇΩ", "1 000 000 ‚ÇΩ"]
        keyboard_rows = []
        for i in range(0, len(sums_initial), 3):
            row = [InlineKeyboardButton(text=s, callback_data=f"initial_{s}") for s in sums_initial[i:i+3]]
            keyboard_rows.append(row)
        kb_initial = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
        await query.message.answer("–°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ —Ç—ã –≥–æ—Ç–æ–≤ –≤–ª–æ–∂–∏—Ç—å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ?", reply_markup=kb_initial)

# === –í–≤–æ–¥ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤–∑–Ω–æ—Å–∞ –∏ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –≤–ª–æ–∂–µ–Ω–∏—è ===
@dp.callback_query(F.data.startswith("initial_"))
async def initial_handler(query: CallbackQuery):
    user_data[query.from_user.id]["initial_sum"] = query.data.replace("initial_", "")
    sums_monthly = ["0 ‚ÇΩ", "10 000 ‚ÇΩ", "20 000 ‚ÇΩ", "30 000 ‚ÇΩ", "40 000 ‚ÇΩ", "50 000 ‚ÇΩ", "100 000 ‚ÇΩ"]
    keyboard_rows = []
    for i in range(0, len(sums_monthly), 3):
        row = [InlineKeyboardButton(text=s, callback_data=f"sum_{s}") for s in sums_monthly[i:i+3]]
        keyboard_rows.append(row)
    kb_monthly = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    await query.message.edit_text("–°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ —Ç—ã –≥–æ—Ç–æ–≤ –≤–∫–ª–∞–¥—ã–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü?", reply_markup=kb_monthly)

# === –ü—Ä–æ–≥–Ω–æ–∑ Trading Bot ===
@dp.callback_query(F.data.startswith("sum_"))
async def sum_handler(query: CallbackQuery):
    user_data[query.from_user.id]["sum"] = query.data.replace("sum_", "")
    initial_sum = int(user_data[query.from_user.id]["initial_sum"].replace("‚ÇΩ","").replace(" ",""))
    monthly_invest = int(user_data[query.from_user.id]["sum"].replace("‚ÇΩ","").replace(" ",""))
    rate = 0.09
    periods = [1,3,6,12,24]

    balance = 0
    forecast_text = f"üí° –ü—Ä–æ–≥–Ω–æ–∑ Trading Bot –ø—Ä–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º –≤–∑–Ω–æ—Å–µ {initial_sum:,} ‚ÇΩ –∏ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–º –≤–ª–æ–∂–µ–Ω–∏–∏ {monthly_invest:,} ‚ÇΩ (9%/–º–µ—Å)\n\n"

    for month in range(1, max(periods)+1):
        invested_this_month = initial_sum if month==1 else monthly_invest
        balance += invested_this_month
        passive_income = int(balance * rate)
        balance += passive_income
        if month in periods:
            forecast_text += (f"–ú–µ—Å—è—Ü {month}\n"
                              f"üíµ –í–ª–æ–∂–µ–Ω–∏–µ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {invested_this_month:,} ‚ÇΩ\n"
                              f"–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥: {passive_income:,} ‚ÇΩ (9%)\n"
                              f"–ë–∞–ª–∞–Ω—Å: {balance:,} ‚ÇΩ\n\n")
    kb_next = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data="offer_read")]
    ])
    await query.message.edit_text(forecast_text, reply_markup=kb_next)

# === –û—Ñ–µ—Ä—Ç–∞ ===
@dp.callback_query(F.data=="offer_read")
async def offer_handler(query: CallbackQuery):
    await bot.send_document(chat_id=query.from_user.id, document=OFFER_PDF_FILE_ID)
    kb_accept = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å –æ—Ñ–µ—Ä—Ç–æ–π ‚úÖ", callback_data="offer_accept")]
    ])
    await query.message.answer("–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –æ—Ñ–µ—Ä—Ç—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ:", reply_markup=kb_accept)

# === –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ñ–µ—Ä—Ç—ã –∏ –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏ ===
@dp.callback_query(F.data=="offer_accept")
async def offer_accept_handler(query: CallbackQuery):
    kb_contact = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–¢–µ–ª–µ–≥—Ä–∞–º", callback_data="contact_telegram")],
        [InlineKeyboardButton(text="Email", callback_data="contact_email")],
        [InlineKeyboardButton(text="–¢–µ–ª–µ—Ñ–æ–Ω", callback_data="contact_phone")],
        [InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="contact_other")]
    ])
    await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ —Å –ª–∏—á–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º:", reply_markup=kb_contact)

@dp.callback_query(F.data.startswith("contact_"))
async def contact_method_handler(query: CallbackQuery):
    method = query.data.replace("contact_","")
    user_data[query.from_user.id]["contact_method"] = method
    if method == "telegram":
        if query.from_user.username:
            user_data[query.from_user.id]["contact_info"] = f"@{query.from_user.username}"
            await send_to_admin(query.from_user.id)
            await query.message.answer("–û—Ç–ª–∏—á–Ω–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ —á–µ—Ä–µ–∑ Telegram.")
        else:
            await query.message.answer("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏–ª–∏ –Ω–µ—Ç username. –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à Telegram –≤—Ä—É—á–Ω—É—é:")
    else:
        await query.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫ —Å –≤–∞–º–∏ –ª—É—á—à–µ —Å–≤—è–∑–∞—Ç—å—Å—è (Email, —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –¥—Ä—É–≥–æ–µ):")

@dp.message()
async def contact_text_handler(message: Message):
    if "contact_method" in user_data.get(message.from_user.id, {}) and \
       message.text and not message.text.startswith("/"):
        user_data[message.from_user.id]["contact_info"] = message.text
        await send_to_admin(message.from_user.id)
        await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞—à–µ–º—É —ç–∫—Å–ø–µ—Ä—Ç—É.")

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É ===
async def send_to_admin(user_id):
    data = user_data.get(user_id, {})
    await bot.send_message(
        chat_id=ADMIN_ID,
        text=(f"üî• –ù–æ–≤—ã–π –∏–Ω–≤–µ—Å—Ç–æ—Ä!\n\n"
              f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{data.get('username','‚Äî')}\n"
              f"–ò–º—è: {data.get('full_name','‚Äî')}\n"
              f"ID: {user_id}\n\n"
              f"üìå –û–ø—ã—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {data.get('experience','‚Äî')}\n"
              f"üìå –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {data.get('discipline','‚Äî')}\n"
              f"üìå –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å: {data.get('quiz_score',0)}/{len(fingram_questions)}\n"
              f"üí∞ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å: {data.get('initial_sum','‚Äî')}\n"
              f"üíµ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è: {data.get('sum','‚Äî')}\n"
              f"üìå –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥: {data.get('contact_method','‚Äî')}\n"
              f"üìå –ö–æ–Ω—Ç–∞–∫—Ç: {data.get('contact_info','‚Äî')}\n")
    )

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    await dp.start_polling(bot)

if __name__=="__main__":
    asyncio.run(main())
