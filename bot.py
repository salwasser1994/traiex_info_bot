import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.client.bot import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã Railway
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ–±–∞–≤—å –µ–≥–æ –≤ Variables –Ω–∞ Railway.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

invest_requests = {}
already_invested = set()

# FAQ
faq_data = {
    "–°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –¥–µ–Ω–µ–≥, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å?": """–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—Ö–æ–¥ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 150 USDT:
- 50 USDT ‚Äî —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏,
- 100 USDT ‚Äî —Ä–∞–±–æ—á–∏–π –¥–µ–ø–æ–∑–∏—Ç.""",

    "–ö–∞–∫–æ–≤–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –≤ –º–µ—Å—è—Ü?": """–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å ‚Äî –æ—Ç 6% –¥–æ 12% –≤ –º–µ—Å—è—Ü. 
–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏.""",

    "–ú–æ–∂–Ω–æ –ª–∏ —Å—Ä–∞–∑—É —Å–Ω—è—Ç—å –¥–µ–ø–æ–∑–∏—Ç?": """–î–∞, –≤—ã–≤–æ–¥ –≤–æ–∑–º–æ–∂–µ–Ω –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–Ω—ã–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞. 
–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º –æ—Ñ–µ—Ä—Ç—ã.""",

    "–ì–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é?": """–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –ª–∏—Ü–µ–Ω–∑–∏–∏ —Ä–∞–∑–º–µ—â–µ–Ω—ã –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ –±–∏—Ä–∂–∏: 
https://www.traiex.com/ru/termsandconditions?anchor=1""",

    "–ï—Å—Ç—å –ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞?": """–î–∞, —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å: 
https://traiex-help.freshdesk.com/support/home""",

    "–ï—Å—Ç—å –ª–∏ –≥–∞—Ä–∞–Ω—Ç–∏–∏?": """–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ –Ω–µ—Ç. –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –æ–±–µ—â–∞–µ—Ç —Å—Ç–æ–ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏, —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã. 
–í—Å–µ —É—Å–ª–æ–≤–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—Å–∞–Ω—ã –≤ –¥–æ–≥–æ–≤–æ—Ä–µ –æ—Ñ–µ—Ä—Ç—ã."""
}

# --- –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã ---
test_questions = [
    {"q": "–ï—Å–ª–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª–∏–Ω—É —Ä—ã—á–∞–≥–∞, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–¥–Ω—è—Ç—å –ª—é–±–æ–π –≤–µ—Å?",
     "options": ["–ö–æ–Ω–µ—á–Ω–æ, —Ç–æ—á–∫–∞ –æ–ø–æ—Ä—ã —Ä–µ—à–∞–µ—Ç", "–ù–µ—Ç, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ"],
     "correct": "–ö–æ–Ω–µ—á–Ω–æ, —Ç–æ—á–∫–∞ –æ–ø–æ—Ä—ã —Ä–µ—à–∞–µ—Ç"},

    {"q": "–ö–∞–∫ –±—ã—Å—Ç—Ä–µ–µ –≤—Å–µ–≥–æ –¥–æ–±—Ä–∞—Ç—å—Å—è –æ—Ç –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞ –¥–æ –ú–æ—Å–∫–≤—ã?",
     "options": ["–°–∞–º–æ–ª—ë—Ç", "–ú–∞—à–∏–Ω–∞", "–ü–æ–µ–∑–¥"],
     "correct": "–°–∞–º–æ–ª—ë—Ç"},

    {"q": "–ö–∞–∫ –ø–æ–¥–Ω—è—Ç—å –ø–ª–∏—Ç—É –Ω–∞ 10 —ç—Ç–∞–∂?",
     "options": ["–ö—Ä–∞–Ω-—Ä—ã—á–∞–≥", "100 —á–µ–ª–æ–≤–µ–∫", "–í–µ—Ä—Ç–æ–ª—ë—Ç"],
     "correct": "–ö—Ä–∞–Ω-—Ä—ã—á–∞–≥"},

    {"q": "–ï—Å—Ç—å –ª–∏ —Ä—ã—á–∞–≥–∏ –≤ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö?",
     "options": ["–ò—Å–∫—É—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–µ–∫—Ç", "–°–ª–æ–∂–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç", "–û–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã"],
     "correct": "–û–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã"},

    {"q": "–ß—Ç–æ —Ç–∞–∫–æ–µ –ò–ò –≤ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö?",
     "options": ["–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–º–æ—â—å", "–ì–∞—Ä–∞–Ω—Ç –ø—Ä–∏–±—ã–ª–∏"],
     "correct": "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–º–æ—â—å"},

    {"q": "–ö–∞–∫ –ò–ò –ø–æ–º–æ–≥–∞–µ—Ç –≤ –∞–Ω–∞–ª–∏–∑–µ —Ä—ã–Ω–∫–∞?",
     "options": ["–í—ã—è–≤–ª—è–µ—Ç —Ç—Ä–µ–Ω–¥—ã, —Ä–∏—Å–∫–∏", "–ó–∞–º–µ–Ω—è–µ—Ç —á–µ–ª–æ–≤–µ–∫–∞"],
     "correct": "–í—ã—è–≤–ª—è–µ—Ç —Ç—Ä–µ–Ω–¥—ã, —Ä–∏—Å–∫–∏"},

    {"q": "–†–æ–ª—å –ò–ò –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏?",
     "options": ["–ê–≤—Ç–æ–ø—Ä–∏–±—ã–ª—å", "–ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ"],
     "correct": "–ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ"},

    {"q": "–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ò–ò?",
     "options": ["–ü–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è", "–ö–æ–Ω—Ç—Ä–æ–ª—å –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞"],
     "correct": "–ö–æ–Ω—Ç—Ä–æ–ª—å –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞"},

    {"q": "–ú–æ–∂–Ω–æ –ª–∏ —Å—á–∏—Ç–∞—Ç—å –ò–ò —Ä—ã—á–∞–≥–æ–º –≤ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö?",
     "options": ["–î–∞, —É—Å–∏–ª–∏–≤–∞–µ—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞", "–ù–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞"],
     "correct": "–î–∞, —É—Å–∏–ª–∏–≤–∞–µ—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞"}
]

user_progress = {}
user_state = {}
user_data = {}

goal_options = ["–ú–∞—à–∏–Ω–∞", "–î–æ–º", "–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥"]
cost_options = {
    "–ú–∞—à–∏–Ω–∞": ["100 000 ‚ÇΩ", "500 000 ‚ÇΩ", "1 000 000 ‚ÇΩ"],
    "–î–æ–º": ["3 000 000 ‚ÇΩ", "5 000 000 ‚ÇΩ", "15 000 000 ‚ÇΩ"]
}
monthly_options = ["10 000 ‚ÇΩ", "20 000 ‚ÇΩ", "30 000 ‚ÇΩ"]

def main_menu():
    keyboard = [
        [KeyboardButton(text="üìä –û–±—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∞"), KeyboardButton(text="üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")],
        [KeyboardButton(text="üí∞ –ì–æ—Ç–æ–≤ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å"), KeyboardButton(text="üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–≥–æ–≤–æ—Ä–∞ –æ—Ñ–µ—Ä—Ç—ã")],
        [KeyboardButton(text="‚ú® –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ–µ –≤–æ–∑–º–æ–∂–Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä—è —Ä—ã—á–∞–≥–∞–º")],
        [KeyboardButton(text="–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã‚ùì")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def faq_menu():
    keyboard = [[KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]] + [[KeyboardButton(text=q)] for q in faq_data.keys()]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def start_test_menu():
    keyboard = [[KeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç")],[KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def option_keyboard(options):
    kb = [[KeyboardButton(text=opt)] for opt in options]
    kb.append([KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def post_calc_menu():
    keyboard = [
        [KeyboardButton(text="üí∞ –ì–æ—Ç–æ–≤ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å")],
        [KeyboardButton(text="–ù–µ –≥–æ—Ç–æ–≤")],
        [KeyboardButton(text="–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

async def send_test_question(message: types.Message, idx: int):
    q = test_questions[idx]
    keyboard = option_keyboard(q["options"])
    await message.answer(q["q"], reply_markup=keyboard)

def inline_back_to_menu():
    keyboard = [[InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="back_to_menu")]]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    file_id = "BAACAgQAAxkDAAIEgGi5kTsunsNKCxSgT62lGkOro6iLAAI8KgACIJ7QUfgrP_Y9_DJKNgQ"
    await message.answer_video(video=file_id, reply_markup=inline_back_to_menu())

from aiogram import F

# --- –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ª–∏—á–∫–µ ---
@dp.message(F.chat.id != -1003081706651)
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    text = message.text

    # —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞–¥–µ–∂–∞ –∏ –∏—Ç–æ–≥–æ–≤–æ–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
    goal_genitive = {
        "–ú–∞—à–∏–Ω–∞": "–º–∞—à–∏–Ω—ã",
        "–î–æ–º": "–¥–æ–º–∞",
        "–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥": "–ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞"
    }

    goal_phrase = {
        "–ú–∞—à–∏–Ω–∞": "–∫—É–ø–∏—Ç—å –º–∞—à–∏–Ω—É —Å—Ç–æ–∏–º–æ—Å—Ç—å—é",
        "–î–æ–º": "–∫—É–ø–∏—Ç—å –¥–æ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å—é",
        "–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥": "–ø–æ–ª—É—á–∞—Ç—å –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥"
    }

    # --- –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é ---
    if text == "üìä –û–±—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∞":
        user_state[user_id] = "step1"
        text1 = (
            "–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω—É —Ü–µ–ª–∏–∫–æ–º –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é, –Ω—É–∂–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –≥–ª–∞–∑–∞–º–∏, "
            "–Ω–æ –∏ —Ç–µ–º–∏ —á–∞—Å—Ç—è–º–∏ —Ç–µ–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–≤–µ–¥—É—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ü–∏—Ñ—Ä—ã –≤ —Ç–∞–±–ª–∏—Ü—ã, —Å–¥–µ–ª–∞—é—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ "
            "–∏ –∫–æ–Ω–µ—á–Ω–æ –∂–µ —Å–¥–µ–ª–∞—é—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –≤—ã–≤–æ–¥—ã.\n\n"
            "–ò —Ç–∞–∫ —Ç–∞–±–ª–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞—é—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–µ–ª:"
        )
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"), KeyboardButton(text="–î–∞–ª–µ–µ‚û°")]],
            resize_keyboard=True
        )
        await message.answer(text1, reply_markup=keyboard)
        return

    elif user_state.get(user_id) == "step1" and text == "–î–∞–ª–µ–µ‚û°":
        user_state[user_id] = "step2"
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"), KeyboardButton(text="–î–∞–ª–µ–µ‚û°")]],
            resize_keyboard=True
        )

        text_table_intro = (
            "üí∏ –û–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Ö–æ–¥–∞: –∑–∞—Ä–ø–ª–∞—Ç–∞ 50 000 ‚ÇΩ\n\n"
            "1Ô∏è‚É£ –¢—Ä–∞—Ç–∏—à—å –≤—Å—ë\n‚û°Ô∏è 2025‚Äì2030: 0 ‚ÇΩ\n\n"
            "2Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ—à—å 10 000 ‚ÇΩ –≤ –º–µ—Å—è—Ü\n‚û°Ô∏è 2025: 120 000 ‚ÇΩ\n‚û°Ô∏è 2026: 240 000 ‚ÇΩ\n‚û°Ô∏è 2027: 360 000 ‚ÇΩ\n"
            "‚û°Ô∏è 2028: 480 000 ‚ÇΩ\n‚û°Ô∏è 2029: 600 000 ‚ÇΩ\n‚û°Ô∏è 2030: 720 000 ‚ÇΩ\n\n"
            "3Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ—à—å 10 000 ‚ÇΩ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ—à—å (—Ä–æ—Å—Ç –∫–∞–ø–∏—Ç–∞–ª–∞)\n‚û°Ô∏è 2025: 261 026 ‚ÇΩ\n‚û°Ô∏è 2026: 1 626 898 ‚ÇΩ\n"
            "‚û°Ô∏è 2027: 7 529 914 ‚ÇΩ\n‚û°Ô∏è 2028: 33 904 261 ‚ÇΩ\n‚û°Ô∏è 2029: 151 743 362 ‚ÇΩ\n‚û°Ô∏è 2030: 678 241 852 ‚ÇΩ"
        )
 
        # –°–Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç
        await message.answer(text_table_intro, reply_markup=keyboard)

        await message.answer_photo(
            photo="AgACAgQAAxkBAAIM0Gi9LaXmP4pct66F2FEKUu0WAAF84gACqMoxG5bI6VHDQO5xqprkdwEAAwIAA3kAAzYE",
            reply_markup=keyboard
        )
        return

    elif user_state.get(user_id) == "step2" and text == "–î–∞–ª–µ–µ‚û°":
        del user_state[user_id]
        text2 = (
            "–°—Ç–æ–∏—Ç –æ—Ç–º–µ—Ç–∏—Ç—å —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å–¥–µ–ª–∞–Ω–∞ –Ω–∞ –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö —Ü–∏—Ñ—Ä–∞—Ö (—Å–µ–π—á–∞—Å –∏–º–µ–Ω–Ω–æ —Ç–∞–∫–∏–µ), "
            "–ø–æ—Ç–æ–º—É –∫–∞–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –∏–º–µ–µ—Ç —Ä–∞–∑–Ω—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å, –Ω–æ –æ—Å–Ω–æ–≤–Ω–∞—è –º—ã—Å–ª—å –¥—É–º–∞—é –ø–æ–Ω—è—Ç–Ω–∞:\n\n"
            "‚Äî –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å –±—É–¥–µ—Ç –æ–¥–∏–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n"
            "‚Äî –µ—Å–ª–∏ –¥–µ–ª–∞—Ç—å, –Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ –±—É–¥–µ—Ç –¥—Ä—É–≥–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n"
            "‚Äî –∏ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—ë —á—Ç–æ –∏–º–µ–µ–º (–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç + —Å–ª–æ–∂–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç), "
            "–ø–æ–ª—É—á–∏–º —Ç–æ —á—Ç–æ –Ω–∞–º –Ω–∞–¥–æ (–∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫ –ø—Ä–∏–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)\n\n"
            "–í–æ—Ç –ø–æ—á–µ–º—É —Ç–∞–∫ –≤–∞–∂–Ω–æ –≤–∏–¥–µ—Ç—å –≤—Å—é –∫–∞—Ä—Ç–∏–Ω—É —Ü–µ–ª–∏–∫–æ–º."
            "–ï—Å–ª–∏ —Ç—ã —Å–æ–≥–ª–∞—Å–µ–Ω —Å–æ –º–Ω–æ–π, –ø—Ä–µ–¥–ª–∞–≥–∞—é –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ç–æ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ —Ç–≤–æ–∏—Ö —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π."
        )
        await message.answer(text2, reply_markup=main_menu())
        return

    elif text in ["‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "–ù–µ –≥–æ—Ç–æ–≤"]:
        if user_state.get(user_id) not in ["step1", "step2"]:
            user_state.pop(user_id, None)
            user_data.pop(user_id, None)
            user_progress.pop(user_id, None)
            await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=main_menu())
            return

    elif text == "üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–≥–æ–≤–æ—Ä–∞ –æ—Ñ–µ—Ä—Ç—ã":
        file_id = "BQACAgQAAxkBAAIFOGi6vNHLzH9IyJt0q7_V4y73FcdrAAKXGwACeDjZUSdnK1dqaQoPNgQ"
        await message.answer_document(file_id)
        return

    elif text == "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã‚ùì":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:", reply_markup=faq_menu())
        return
    elif text in faq_data:
        await message.answer(faq_data[text])
        return
    elif text == "‚ú® –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ–µ –≤–æ–∑–º–æ–∂–Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä—è —Ä—ã—á–∞–≥–∞–º":
        await message.answer("üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å.\n"
                             "–ü–æ–º–Ω–∏—Ç–µ, –ò–ò ‚Äî —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –∞ –Ω–µ –≤–æ–ª—à–µ–±–Ω–∞—è –ø–∞–ª–æ—á–∫–∞.", reply_markup=start_test_menu())
        return
    elif text == "üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç":
        user_progress[user_id] = 0
        await send_test_question(message, 0)
        return

    # --- –¢–µ—Å—Ç / –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ / –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ ---
    if text == "üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç":
        user_state[user_id] = "choose_goal"
        await message.answer("–ö–∞–∫–æ–≤–∞ —Ç–≤–æ—è —Ü–µ–ª—å?", reply_markup=option_keyboard(goal_options))
        return

    # –í—ã–±–æ—Ä —Ü–µ–ª–∏
    if user_state.get(user_id) == "choose_goal":
        if text in ["–ú–∞—à–∏–Ω–∞", "–î–æ–º"]:
            user_data[user_id] = {"goal": text}
            user_state[user_id] = "choose_cost"
            await message.answer(f"–ö–∞–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å {goal_genitive[text]}?", reply_markup=option_keyboard(cost_options[text]))
        elif text == "–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥":
            user_data[user_id] = {"goal": text}
            user_state[user_id] = "choose_target_income"
            await message.answer("–°–∫–æ–ª—å–∫–æ –≤ –º–µ—Å—è—Ü –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å?", reply_markup=option_keyboard(["100 000 ‚ÇΩ","500 000 ‚ÇΩ","1 000 000 ‚ÇΩ"]))
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π.")
        return

    # –ú–∞—à–∏–Ω–∞ / –î–æ–º ‚Äî –≤—ã–±–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    if user_state.get(user_id) == "choose_cost":
        goal = user_data[user_id]["goal"]
        if text in cost_options[goal]:
            cost = int(text.replace(" ‚ÇΩ","").replace(" ",""))
            user_data[user_id]["cost"] = cost
            user_state[user_id] = "choose_monthly"
            await message.answer("–°–∫–æ–ª—å–∫–æ –≤—ã –≥–æ—Ç–æ–≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –º–µ—Å—è—Ü?", reply_markup=option_keyboard(monthly_options))
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—É–º–º.")
        return

    # –ú–∞—à–∏–Ω–∞ / –î–æ–º ‚Äî —Ä–∞—Å—á–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
    if user_state.get(user_id) == "choose_monthly":
        try:
            monthly = int(text.replace(" ‚ÇΩ","").replace(" ",""))
            user_data[user_id]["monthly"] = monthly
            goal = user_data[user_id]["goal"]
            cost = user_data[user_id]["cost"]
            total = 0
            month = 0
            monthly_rate = 0.09
            monthly_totals = []

            while total < cost:
                month += 1
                total = (total + monthly)*(1+monthly_rate)
                monthly_totals.append(total)

            msg = "üìà –ù–∞–∫–æ–ø–ª–µ–Ω–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º —Å —É—á–µ—Ç–æ–º –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ —Å–ª–æ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ 9% –≤ —Å—Ä–µ–¥–Ω–µ–º:\n\n"
            for i,val in enumerate(monthly_totals,start=1):
                if i<=3 or i>len(monthly_totals)-3:
                    msg+=f"–ú–µ—Å—è—Ü {i}: {int(val):,} ‚ÇΩ\n"
                elif i==4:
                    msg+="...\n"

            msg+=f"\n–° –≤–∞—à–µ–π –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–µ–π {monthly:,} ‚ÇΩ –≤—ã —Å–º–æ–∂–µ—Ç–µ {goal_phrase[goal]} {cost:,} ‚ÇΩ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {month} –º–µ—Å—è—Ü–µ–≤.\n"
            msg+="–í–∞–∂–Ω–æ: —Ä–∞—Å—á–µ—Ç —É—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ª–æ–∂–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç."

            await message.answer(msg, reply_markup=post_calc_menu())
            user_state.pop(user_id)
        except:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—É–º–º.")
        return

    # –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ ‚Äî –≤—ã–±–æ—Ä –∂–µ–ª–∞–µ–º–æ–≥–æ –¥–æ—Ö–æ–¥–∞
    if user_state.get(user_id) == "choose_target_income":
        if text in ["100 000 ‚ÇΩ","500 000 ‚ÇΩ","1 000 000 ‚ÇΩ"]:
            target_income = int(text.replace(" ‚ÇΩ","").replace(" ",""))
            user_data[user_id]["target_income"] = target_income
            user_state[user_id] = "choose_monthly_passive"
            await message.answer("–°–∫–æ–ª—å–∫–æ –≤—ã –≥–æ—Ç–æ–≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –º–µ—Å—è—Ü?", reply_markup=option_keyboard(monthly_options))
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—É–º–º.")
        return

    # –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ ‚Äî —Ä–∞—Å—á–µ—Ç
    if user_state.get(user_id) == "choose_monthly_passive":
        try:
            monthly = int(text.replace(" ‚ÇΩ","").replace(" ",""))
            user_data[user_id]["monthly"] = monthly
            target_income = user_data[user_id]["target_income"]
            month = 0
            capital = 0
            monthly_rate = 0.09
            monthly_totals = []

            while True:
                month += 1
                capital = (capital + monthly)*(1+monthly_rate)
                passive = capital*monthly_rate
                monthly_totals.append(passive)
                if passive >= target_income:
                    break

            msg = "üìà –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –ø–æ –º–µ—Å—è—Ü–∞–º:\n\n"
            for i,pas in enumerate(monthly_totals,start=1):
                if i<=3 or i>len(monthly_totals)-3:
                    msg+=f"–ú–µ—Å—è—Ü {i}: {int(pas):,} ‚ÇΩ\n"
                elif i==4:
                    msg+="...\n"

            msg+=f"\n–ü—Ä–∏ –≤–∞—à–µ–π –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ {monthly:,} ‚ÇΩ –≤—ã —Å–º–æ–∂–µ—Ç–µ {goal_phrase['–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥']} {target_income:,} ‚ÇΩ/–º–µ—Å –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {month} –º–µ—Å—è—Ü–µ–≤.\n"
            msg+="–í–∞–∂–Ω–æ: —Ä–∞—Å—á–µ—Ç —É—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ª–æ–∂–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç."

            await message.answer(msg, reply_markup=post_calc_menu())
            user_state.pop(user_id)
        except:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—É–º–º.")
        return

    # –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ
    if text == "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ":
        user_state[user_id] = "choose_goal"
        await message.answer("–ö–∞–∫–æ–≤–∞ —Ç–≤–æ—è —Ü–µ–ª—å?", reply_markup=option_keyboard(goal_options))
        return

    # –¢–µ—Å—Ç –Ω–∞ –ò–ò
    if user_id in user_progress:
        idx = user_progress[user_id]
        q = test_questions[idx]
        if text == q["correct"]:
            user_progress[user_id]+=1
            if user_progress[user_id]<len(test_questions):
                await send_test_question(message,user_progress[user_id])
            else:
                await message.answer("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω! –í—ã –ø–æ–Ω—è–ª–∏, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä—ã—á–∞–≥–æ–≤, —Ç–∞–∫–∏—Ö –∫–∞–∫ –ò–ò, "
                                     "–ø–æ–º–æ–≥–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ü–µ–ª–µ–π.", reply_markup=main_menu())
                user_progress.pop(user_id)
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ
    await message.answer("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é üëá", reply_markup=main_menu())


from aiogram import F


import datetime
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ì–æ—Ç–æ–≤ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å" –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π ---

DEV_IDS = [5205381793, 454141239, 1623272928]
CHANNEL_LINK = "https://t.me/fingram_global"

async def handle_invest(message: types.Message):
    user_id = message.from_user.id
    user = message.from_user

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞–∂–∏–º–∞–ª
    if user_id in already_invested:
        invest_info = invest_requests.get(user_id)
        text = f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –∫–∞–Ω–∞–ª—É, –≥–¥–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –º–Ω–æ–≥–æ –Ω—É–∂–Ω–æ–π –∏ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n{CHANNEL_LINK}"
        kb = None
        if invest_info and invest_info.get("helper_id"):
            kb = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text=f"‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–º–æ—â–Ω–∏–∫—É {invest_info['helper_name']}",
                    url=f"https://t.me/{invest_info['helper_username']}" if invest_info.get("helper_username") else f"tg://user?id={invest_info['helper_id']}"
                )
            ]])
        await message.answer(text, reply_markup=kb)
        return

    # –ù–æ–≤—ã–π –∏–Ω–≤–µ—Å—Ç–æ—Ä
    already_invested.add(user_id)
    invest_requests[user_id] = {
        "user_id": user.id,
        "full_name": user.full_name,
        "username": user.username,
        "group_msg_id": None,
        "helper_id": None,
        "helper_name": None,
        "helper_username": None,
        "confirmed": False,
        "investment_confirmed": False
    }

    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
    group_text = (
        f"üö® –ù–æ–≤—ã–π –∏–Ω–≤–µ—Å—Ç–æ—Ä!\n\n"
        f"üë§ –ò–º—è: {user.full_name}\n"
        f"üÜî Telegram ID: {user.id}\n"
        f"üí¨ Username: @{user.username if user.username else '–Ω–µ—Ç'}"
    )
    keyboard_group = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É",
            callback_data=f"confirm_{user.id}"
        )
    ]])

    sent = await bot.send_message(chat_id=-1003081706651, text=group_text, reply_markup=keyboard_group)
    invest_requests[user_id]["group_msg_id"] = sent.message_id

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    text_user = (
        "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é –≤–∞—Å! –í–∞–º —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.\n\n"
        f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –∫–∞–Ω–∞–ª—É, –≥–¥–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –º–Ω–æ–≥–æ –Ω—É–∂–Ω–æ–π –∏ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n{CHANNEL_LINK}"
    )
    await message.answer(text_user, reply_markup=None)


# --- Callback –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –ø–æ–º–æ—â–Ω–∏–∫–æ–º ---
@dp.callback_query(lambda c: c.data.startswith("confirm_"))
async def confirm_investor(callback: types.CallbackQuery):
    data = callback.data
    chat_id = callback.message.chat.id
    message_id = callback.message.message_id
    user = callback.from_user

    if chat_id != -1003081706651:  # —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø–∞ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤
        return

    try:
        investor_id = int(data.split("_")[1])
    except (IndexError, ValueError):
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏", show_alert=True)
        return

    investor = invest_requests.get(investor_id)
    if not investor:
        await callback.answer("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    now = datetime.datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    investor["helper_id"] = user.id
    investor["helper_name"] = user.full_name
    investor["helper_username"] = user.username
    investor["confirmed"] = True

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    kb_user = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text=f"‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–º–æ—â–Ω–∏–∫—É {user.full_name}",
            url=f"https://t.me/{user.username}" if user.username else f"tg://user?id={user.id}"
        )
    ]])
    await bot.send_message(
        chat_id=investor_id,
        text=f"‚úÖ –í–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ {user.full_name} –Ω–∞–∑–Ω–∞—á–µ–Ω!\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É.",
        reply_markup=kb_user
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
    new_group_text = (
        f"üö® –ù–æ–≤—ã–π –∏–Ω–≤–µ—Å—Ç–æ—Ä!\n\n"
        f"üë§ –ò–º—è: {investor['full_name']}\n"
        f"üÜî Telegram ID: {investor['user_id']}\n"
        f"üí¨ Username: @{investor['username'] if investor['username'] else '–Ω–µ—Ç'}\n\n"
        f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ\n"
        f"–ü–æ–º–æ—â–Ω–∏–∫: {user.full_name}\n"
        f"–î–∞—Ç–∞: {now}"
    )
    keyboard_group = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text="üíµ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ",
            callback_data=f"investment_{investor_id}"
        )
    ]])
    await callback.message.edit_text(new_group_text, reply_markup=keyboard_group)
    await callback.answer("–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ")


# --- Callback –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–∏—è ---
@dp.callback_query(lambda c: c.data.startswith("investment_"))
async def confirm_investment(callback: types.CallbackQuery):
    data = callback.data
    chat_id = callback.message.chat.id
    user = callback.from_user

    if chat_id != -1003081706651:
        return

    try:
        investor_id = int(data.split("_")[1])
    except (IndexError, ValueError):
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏", show_alert=True)
        return

    investor = invest_requests.get(investor_id)
    if not investor:
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    now = datetime.datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    investor["investment_confirmed"] = True

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
    new_group_text = (
        f"üö® –ù–æ–≤—ã–π –∏–Ω–≤–µ—Å—Ç–æ—Ä!\n\n"
        f"üë§ –ò–º—è: {investor['full_name']}\n"
        f"üÜî Telegram ID: {investor['user_id']}\n"
        f"üí¨ Username: @{investor['username'] if investor['username'] else '–Ω–µ—Ç'}\n\n"
        f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ\n"
        f"–ü–æ–º–æ—â–Ω–∏–∫: {investor['helper_name']}\n"
        f"–î–∞—Ç–∞: {now}\n\n"
        f"üí∞ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –≤–ª–æ–∂–µ–Ω–∏–µ\n"
        f"–î–∞—Ç–∞: {now}"
    )
    await callback.message.edit_text(new_group_text, reply_markup=None)
    await callback.answer("–í–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ ‚úÖ")


async def main():
    await dp.start_polling(bot)

if __name__=="__main__":
    asyncio.run(main())
