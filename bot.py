import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.client.bot import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "8473772441:AAHpXfxOxR-OL6e3GSfh4xvgiDdykQhgTus"

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º parse_mode
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# FAQ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ AI –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
faq_data = {
    "–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π?":
        "‚úÖ –î–∞, –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞—â–∏—â–µ–Ω—ã. ü§ñ AI —Å–æ–≤–µ—Ç—É–µ—Ç: –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—Å—ã–ª–∫–∏ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã!",
    "–ß—Ç–æ –±—É–¥–µ—Ç, –µ—Å–ª–∏ —è –ø–æ—Ç–µ—Ä—è—é –¥–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç—É?":
        "üîë –í—ã —Å–º–æ–∂–µ—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ e-mail –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É. AI –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å!",
    "–ù—É–∂–Ω–æ –ª–∏ –ø–ª–∞—Ç–∏—Ç—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å?":
        "üí∏ –ù–µ—Ç, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è. AI —Å–æ–≤–µ—Ç—É–µ—Ç: —Å–Ω–∞—á–∞–ª–∞ –∏–∑—É—á–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É!",
    "–ï—Å—Ç—å –ª–∏ —Å–∫—Ä—ã—Ç—ã–µ –∫–æ–º–∏—Å—Å–∏–∏?":
        "üßê –ù–µ—Ç, –≤—Å–µ –∫–æ–º–∏—Å—Å–∏–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ. AI —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç: —á–∏—Ç–∞–π—Ç–µ –¥–æ–≥–æ–≤–æ—Ä –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ.",
    "–ú–æ–∂–Ω–æ –ª–∏ –≤—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç?":
        "üí∞ –î–∞, –±–µ–∑ –∑–∞–º–æ—Ä–æ–∑–∫–∏. AI –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç: –≤—Å–µ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –±—é–¥–∂–µ—Ç!",
    "–ê –µ—Å–ª–∏ —è –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö?":
        "üòé –í—Å—ë –ø—Ä–æ—Å—Ç–æ! –ï—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –≤–∏–¥–µ–æ—É—Ä–æ–∫–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞. AI —Å–æ–≤–µ—Ç—É–µ—Ç: —É—á–∏—Ç–µ—Å—å –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ.",
    "–ß—Ç–æ, –µ—Å–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å?":
        "üõ°Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞. AI —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç: –Ω–µ —Ö—Ä–∞–Ω–∏—Ç–µ –≤—Å—ë –Ω–∞ –æ–¥–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ.",
    "–ù—É–∂–Ω–æ –ª–∏ —Ç—Ä–∞—Ç–∏—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏?":
        "‚è±Ô∏è –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å. AI –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç: —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –≤–∞–∂–Ω–µ–µ –æ–±—ä–µ–º–∞.",
    "–ï—Å—Ç—å –ª–∏ –≥–∞—Ä–∞–Ω—Ç–∏–∏?":
        "‚öñÔ∏è –ì–∞—Ä–∞–Ω—Ç–∏—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –∏ —á–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã. AI —Å–æ–≤–µ—Ç—É–µ—Ç: –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ —Ä–∏—Å–∫–∏."
}

# –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å —à–∞–≥–∞–º–∏
test_questions = [
    {
        "q": "–ß—Ç–æ —Ç–∞–∫–æ–µ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç (–ò–ò) –≤ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö?",
        "options": [
            "üìä –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö",
            "üîÆ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–µ—Ä—Ç, –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—é—â–∏–π –±—É–¥—É—â–µ–µ"
        ],
        "correct": "üìä –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
    },
    {
        "q": "–ö–∞–∫ –ò–ò –ø–æ–º–æ–≥–∞–µ—Ç –∞–Ω–∞–ª–∏–∑—É —Ä—ã–Ω–∫–∞?",
        "options": [
            "‚ö° –ë—ã—Å—Ç—Ä–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ—Ç—á—ë—Ç—ã",
            "üë§ –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞"
        ],
        "correct": "‚ö° –ë—ã—Å—Ç—Ä–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ—Ç—á—ë—Ç—ã"
    },
    {
        "q": "–†–æ–ª—å –ò–ò –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏?",
        "options": [
            "ü§ñ –£—Å—Ç—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å —á–µ–ª–æ–≤–µ–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–±—ã–ª—å",
            "üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"
        ],
        "correct": "üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"
    },
    {
        "q": "–ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –ò–ò –≤—ã–ø–æ–ª–Ω—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ?",
        "options": [
            "üîç –í—ã—è–≤–ª–µ–Ω–∏–µ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏—Ö —Å—Ö–µ–º",
            "üíµ –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏ –ø—Ä–∏–±—ã–ª–∏"
        ],
        "correct": "üîç –í—ã—è–≤–ª–µ–Ω–∏–µ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏—Ö —Å—Ö–µ–º"
    },
    {
        "q": "–ö–ª—é—á–µ–≤–æ–π —Ñ–∞–∫—Ç–æ—Ä –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ò–ò?",
        "options": [
            "üõë –ü–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º",
            "üéØ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"
        ],
        "correct": "üéØ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"
    }
]

user_progress = {}
user_state = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    keyboard = [
        [KeyboardButton("üìä –û–±—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∞"), KeyboardButton("üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")],
        [KeyboardButton("üí∞ –ì–æ—Ç–æ–≤ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å"), KeyboardButton("üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–≥–æ–≤–æ—Ä–∞ –æ—Ñ–µ—Ä—Ç—ã")],
        [KeyboardButton("‚ú® –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ–µ –≤–æ–∑–º–æ–∂–Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä—è —Ä—ã—á–∞–≥–∞–º")],
        [KeyboardButton("‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# –ú–µ–Ω—é FAQ
def faq_menu():
    keyboard = [[KeyboardButton(q)] for q in faq_data.keys()]
    keyboard.append([KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# –ú–µ–Ω—é –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
def start_test_menu():
    keyboard = [
        [KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç")],
        [KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
async def send_test_question(message: types.Message, idx: int):
    q = test_questions[idx]
    total = len(test_questions)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(opt)] for opt in q["options"]] + [[KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]],
        resize_keyboard=True
    )
    step = f"üõ∏ –®–∞–≥ {idx+1}/{total}"
    await message.answer(f"{step}\n\n{q['q']}", reply_markup=keyboard)

# Inline –∫–Ω–æ–ø–∫–∞ "–í –º–µ–Ω—é"
def inline_back_to_menu():
    keyboard = [[InlineKeyboardButton("–í –º–µ–Ω—é", callback_data="back_to_menu")]]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±—É–¥—É—â–∏–π –º–∏—Ä –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–∫–∏
@dp.callback_query()
async def callbacks(callback: types.CallbackQuery):
    if callback.data == "back_to_menu":
        await callback.message.answer("–°–¥–µ–ª–∞–π —Å–≤–æ–π –≤—ã–±–æ—Ä üëá", reply_markup=main_menu())
        await callback.answer()

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞
@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    text = message.text

    # –û–±—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∞
    if text == "üìä –û–±—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∞":
        user_state[user_id] = "step1"
        text1 = (
            "üåå –ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∑–≥–ª—è–¥ –∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç AI.\n"
            "üí° –¢–∞–±–ª–∏—Ü—ã –ø–æ–¥—Å–≤–µ—á–∏–≤–∞—é—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–µ–ª:"
        )
        keyboard = ReplyKeyboardMarkup([[KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"), KeyboardButton("–î–∞–ª–µ–µ‚û°")]], resize_keyboard=True)
        await message.answer(text1, reply_markup=keyboard)

    elif user_state.get(user_id) == "step1" and text == "–î–∞–ª–µ–µ‚û°":
        user_state[user_id] = "step2"
        keyboard = ReplyKeyboardMarkup([[KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"), KeyboardButton("–î–∞–ª–µ–µ‚û°")]], resize_keyboard=True)
        await message.answer_photo(
            photo="AgACAgQAAxkBAAIM0Gi9LaXmP4pct66F2FEKUu0WAAF84gACqMoxG5bI6VHDQO5xqprkdwEAAwIAA3kAAzYE",
            reply_markup=keyboard
        )

    elif user_state.get(user_id) == "step2" and text == "–î–∞–ª–µ–µ‚û°":
        del user_state[user_id]
        text2 = (
            "üöÄ –¢–∞–±–ª–∏—Ü–∞ –Ω–∞ –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö —Ü–∏—Ñ—Ä–∞—Ö:\n"
            "‚Äî –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å: –æ–¥–∏–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n"
            "‚Äî –ï—Å–ª–∏ –¥–µ–ª–∞—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ: –¥—Ä—É–≥–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n"
            "‚Äî –ò—Å–ø–æ–ª—å–∑—É—è AI + —Å–ª–æ–∂–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: –±—ã—Å—Ç—Ä—ã–π —Ä–æ—Å—Ç –∫–∞–ø–∏—Ç–∞–ª–∞\n"
            "üíé –í–∞–∂–Ω–æ –≤–∏–¥–µ—Ç—å –≤—Å—é –∫–∞—Ä—Ç–∏–Ω—É —Ü–µ–ª–∏–∫–æ–º!"
        )
        await message.answer(text2, reply_markup=main_menu())

    # –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–≥–æ–≤–æ—Ä–∞
    elif text == "üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–≥–æ–≤–æ—Ä–∞ –æ—Ñ–µ—Ä—Ç—ã":
        await message.answer_document("BQACAgQAAxkBAAIFOGi6vNHLzH9IyJt0q7_V4y73FcdrAAKXGwACeDjZUSdnK1dqaQoPNgQ")

    # –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
    elif text == "üí∞ –ì–æ—Ç–æ–≤ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å":
        await message.answer("üåü –ù–∞—á–Ω–∏ —Å–≤–æ–π –ø—É—Ç—å –∑–¥–µ—Å—å:\nhttps://traiex.gitbook.io/user-guides/ru/kak-zaregistrirovatsya-na-traiex")

    # FAQ
    elif text == "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=faq_menu())
    elif text in faq_data:
        await message.answer(f"ü§ñ AI –ü–æ–¥—Å–∫–∞–∑–∫–∞: {faq_data[text]}")

    # –¢–µ—Å—Ç
    elif text == "‚ú® –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ–µ –≤–æ–∑–º–æ–∂–Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä—è —Ä—ã—á–∞–≥–∞–º":
        await message.answer("üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å.\nAI –±—É–¥–µ—Ç –ø–æ–º–æ–≥–∞—Ç—å.", reply_markup=start_test_menu())
    elif text == "üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç":
        user_progress[user_id] = 0
        await send_test_question(message, 0)
    elif user_id in user_progress:
        idx = user_progress[user_id]
        q = test_questions[idx]
        if text == q["correct"]:
            await message.answer("‚úÖ –í–µ—Ä–Ω–æ!")
            idx += 1
            if idx < len(test_questions):
                user_progress[user_id] = idx
                await send_test_question(message, idx)
            else:
                await message.answer("üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!", reply_markup=main_menu())
                del user_progress[user_id]
        elif text == "‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
            await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=main_menu())
            del user_progress[user_id]

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    elif text == "‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        user_state.pop(user_id, None)
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=main_menu())

    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é üëá", reply_markup=main_menu())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
