import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.client.bot import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "8473772441:AAHpXfxOxR-OL6e3GSfh4xvgiDdykQhgTus"

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã FAQ
faq_data = {
    "–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π?":
        "–î–∞, –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ –∑–∞—â–∏—â—ë–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞–¥—ë–∂–Ω–æ –∑–∞—â–∏—â–µ–Ω—ã.",
    "–ß—Ç–æ –±—É–¥–µ—Ç, –µ—Å–ª–∏ —è –ø–æ—Ç–µ—Ä—è—é –¥–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç—É?":
        "–í—ã —Å–º–æ–∂–µ—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ e-mail –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É ‚Äî –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–æ–ø–∞–¥—ë—Ç.",
    "–ù—É–∂–Ω–æ –ª–∏ –ø–ª–∞—Ç–∏—Ç—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å?":
        "–ù–µ—Ç, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è. –í—ã –º–æ–∂–µ—Ç–µ –∏–∑—É—á–∏—Ç—å –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ –æ –≤–ª–æ–∂–µ–Ω–∏—è—Ö.",
    "–ï—Å—Ç—å –ª–∏ —Å–∫—Ä—ã—Ç—ã–µ –∫–æ–º–∏—Å—Å–∏–∏?":
        "–ù–µ—Ç, –≤—Å–µ –∫–æ–º–∏—Å—Å–∏–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –∏ –∑–∞—Ä–∞–Ω–µ–µ —É–∫–∞–∑–∞–Ω—ã. –í—ã –≤—Å–µ–≥–¥–∞ –∑–Ω–∞–µ—Ç–µ, —Å–∫–æ–ª—å–∫–æ –∏ –∑–∞ —á—Ç–æ –ø–ª–∞—Ç–∏—Ç–µ.",
    "–ú–æ–∂–Ω–æ –ª–∏ –≤—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç?":
        "–î–∞, —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ –≤–∞—à–µ–º—É –∂–µ–ª–∞–Ω–∏—é, –±–µ–∑ ¬´–∑–∞–º–æ—Ä–æ–∑–∫–∏¬ª –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å—Ä–æ–∫–æ–≤.",
    "–ê –µ—Å–ª–∏ —è –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö?":
        "–ù–µ —Å—Ç—Ä–∞—à–Ω–æ üôÇ –í—Å—ë –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ —Ç–∞–∫, —á—Ç–æ–±—ã –¥–∞–∂–µ –Ω–æ–≤–∏—á–æ–∫ –º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è. –ï—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –≤–∏–¥–µ–æ—É—Ä–æ–∫–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞.",
    "–ß—Ç–æ, –µ—Å–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å?":
        "–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã. –î–∞–∂–µ –≤ —Å–ª—É—á–∞–µ —Å–±–æ—è –¥–µ–Ω—å–≥–∏ –æ—Å—Ç–∞—é—Ç—Å—è —É –≤–∞—Å.",
    "–ù—É–∂–Ω–æ –ª–∏ —Ç—Ä–∞—Ç–∏—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏?":
        "–ù–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É–¥–µ–ª—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–∏–º —Å—á—ë—Ç–æ–º.",
    "–ï—Å—Ç—å –ª–∏ –≥–∞—Ä–∞–Ω—Ç–∏–∏?":
        "–ú—ã –Ω–µ –æ–±–µ—â–∞–µ–º ¬´–∑–æ–ª–æ—Ç—ã—Ö –≥–æ—Ä¬ª, –Ω–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —á–µ—Å—Ç–Ω—É—é —Ä–∞–±–æ—Ç—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã."
}

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
user_progress = {}
user_state = {}  # –¥–ª—è "–û–±—â–µ–π –∫–∞—Ä—Ç–∏–Ω—ã"
user_test_path = {}  # –ø—É—Ç—å —Ç–µ—Å—Ç–∞: "–º–∞—à–∏–Ω–∞", "–¥–æ–º", "–ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥"
user_test_answers = {}  # —Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (ReplyKeyboard)
def main_menu():
    keyboard = [
        [KeyboardButton(text="üìä –û–±—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∞"), KeyboardButton(text="üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")],
        [KeyboardButton(text="üí∞ –ì–æ—Ç–æ–≤ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å"), KeyboardButton(text="üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–≥–æ–≤–æ—Ä–∞ –æ—Ñ–µ—Ä—Ç—ã")],
        [KeyboardButton(text="‚ú® –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ–µ –≤–æ–∑–º–æ–∂–Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä—è —Ä—ã—á–∞–≥–∞–º")],
        [KeyboardButton(text="–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã‚ùì")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# –ú–µ–Ω—é FAQ
def faq_menu():
    keyboard = [[KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]]
    keyboard += [[KeyboardButton(text=q)] for q in faq_data.keys()]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# --- –ú–µ–Ω—é —Ç–µ—Å—Ç–∞ ---
def test_start_menu():
    keyboard = [
        [KeyboardButton(text="–ú–∞—à–∏–Ω–∞"), KeyboardButton(text="–î–æ–º"), KeyboardButton(text="–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥")],
        [KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def test_question_menu(options):
    keyboard = [[KeyboardButton(text=opt)] for opt in options]
    keyboard.append([KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# --- –§—É–Ω–∫—Ü–∏–∏ —Ç–µ—Å—Ç–∞ ---
async def start_test(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:", reply_markup=test_start_menu())

async def handle_test_answer(message: types.Message):
    user_id = message.from_user.id
    text = message.text

    # –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
    if text == "‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        user_test_path.pop(user_id, None)
        user_test_answers.pop(user_id, None)
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=main_menu())
        return

    # –ü–µ—Ä–≤—ã–π –≤—ã–±–æ—Ä –ø—É—Ç–∏
    if user_id not in user_test_path:
        if text.lower() == "–º–∞—à–∏–Ω–∞":
            user_test_path[user_id] = "–º–∞—à–∏–Ω–∞"
            user_test_answers[user_id] = {}
            options = ["100 000‚ÇΩ", "500 000‚ÇΩ", "1 000 000‚ÇΩ"]
            await message.answer("–ö–∞–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—à–∏–Ω—ã?", reply_markup=test_question_menu(options))
        elif text.lower() == "–¥–æ–º":
            user_test_path[user_id] = "–¥–æ–º"
            user_test_answers[user_id] = {}
            options = ["3 000 000‚ÇΩ", "5 000 000‚ÇΩ", "15 000 000‚ÇΩ"]
            await message.answer("–ö–∞–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–º–∞?", reply_markup=test_question_menu(options))
        elif text.lower() == "–ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥":
            user_test_path[user_id] = "–ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥"
            user_test_answers[user_id] = {}
            options = ["100 000‚ÇΩ", "500 000‚ÇΩ", "1 000 000‚ÇΩ"]
            await message.answer("–°–∫–æ–ª—å–∫–æ –≤ –º–µ—Å—è—Ü —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å?", reply_markup=test_question_menu(options))
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    path = user_test_path[user_id]
    answers = user_test_answers[user_id]

    if path == "–º–∞—à–∏–Ω–∞":
        if "—Å—Ç–æ–∏–º–æ—Å—Ç—å" not in answers:
            answers["—Å—Ç–æ–∏–º–æ—Å—Ç—å"] = text
            options = ["10 000‚ÇΩ", "20 000‚ÇΩ", "30 000‚ÇΩ"]
            await message.answer("–°–∫–æ–ª—å–∫–æ –≤—ã –≥–æ—Ç–æ–≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –º–µ—Å—è—Ü?", reply_markup=test_question_menu(options))
        else:
            answers["–∏–Ω–≤–µ—Å—Ç"] = text
            await calculate_result(message, path, answers)
            user_test_path.pop(user_id)
            user_test_answers.pop(user_id)

    elif path == "–¥–æ–º":
        if "—Å—Ç–æ–∏–º–æ—Å—Ç—å" not in answers:
            answers["—Å—Ç–æ–∏–º–æ—Å—Ç—å"] = text
            options = ["10 000‚ÇΩ", "20 000‚ÇΩ", "30 000‚ÇΩ"]
            await message.answer("–°–∫–æ–ª—å–∫–æ –≤—ã –≥–æ—Ç–æ–≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –º–µ—Å—è—Ü?", reply_markup=test_question_menu(options))
        else:
            answers["–∏–Ω–≤–µ—Å—Ç"] = text
            await calculate_result(message, path, answers)
            user_test_path.pop(user_id)
            user_test_answers.pop(user_id)

    elif path == "–ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥":
        if "–¥–æ—Ö–æ–¥" not in answers:
            answers["–¥–æ—Ö–æ–¥"] = text
            options = ["10 000‚ÇΩ", "20 000‚ÇΩ", "30 000‚ÇΩ"]
            await message.answer("–°–∫–æ–ª—å–∫–æ –≤—ã –≥–æ—Ç–æ–≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –º–µ—Å—è—Ü?", reply_markup=test_question_menu(options))
        else:
            answers["–∏–Ω–≤–µ—Å—Ç"] = text
            await calculate_result(message, path, answers)
            user_test_path.pop(user_id)
            user_test_answers.pop(user_id)

# --- –†–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
async def calculate_result(message: types.Message, path, answers):
    # –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —á–∏—Å–ª–∞
    def parse_rub(text):
        return int(text.replace("‚ÇΩ", "").replace(" ", "").replace(",", ""))

    invest = parse_rub(answers["–∏–Ω–≤–µ—Å—Ç"])
    rate = 1.35  # 135% –≥–æ–¥–æ–≤—ã—Ö

    if path == "–º–∞—à–∏–Ω–∞":
        price = parse_rub(answers["—Å—Ç–æ–∏–º–æ—Å—Ç—å"])
        months = 0
        total = 0
        while total < price:
            total += invest
            total *= rate ** (1/12)
            months += 1
        await message.answer(f"–° –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –ò–ò-–±–æ—Ç–∞, –ø—Ä–∏ –≤–∞—à–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö {invest}‚ÇΩ –≤ –º–µ—Å—è—Ü, "
                             f"–≤—ã —Å–º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –º–∞—à–∏–Ω—É —Å—Ç–æ–∏–º–æ—Å—Ç—å—é {price}‚ÇΩ —á–µ—Ä–µ–∑ {months} –º–µ—Å—è—Ü–µ–≤.", reply_markup=main_menu())

    elif path == "–¥–æ–º":
        price = parse_rub(answers["—Å—Ç–æ–∏–º–æ—Å—Ç—å"])
        months = 0
        total = 0
        while total < price:
            total += invest
            total *= rate ** (1/12)
            months += 1
        await message.answer(f"–° –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –ò–ò-–±–æ—Ç–∞, –ø—Ä–∏ –≤–∞—à–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö {invest}‚ÇΩ –≤ –º–µ—Å—è—Ü, "
                             f"–≤—ã —Å–º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –¥–æ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å—é {price}‚ÇΩ —á–µ—Ä–µ–∑ {months} –º–µ—Å—è—Ü–µ–≤.", reply_markup=main_menu())

    elif path == "–ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥":
        target = parse_rub(answers["–¥–æ—Ö–æ–¥"])
        # —Ä–∞—Å—á–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å target * 12 / –≥–æ–¥–æ–≤–æ–π –¥–æ—Ö–æ–¥
        capital = target * 12 / rate
        months = 0
        total = 0
        while total < capital:
            total += invest
            total *= rate ** (1/12)
            months += 1
        await message.answer(f"–° –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –ò–ò-–±–æ—Ç–∞, –ø—Ä–∏ –≤–∞—à–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö {invest}‚ÇΩ –≤ –º–µ—Å—è—Ü, "
                             f"–≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å {target}‚ÇΩ –≤ –º–µ—Å—è—Ü –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ {months} –º–µ—Å—è—Ü–µ–≤.", reply_markup=main_menu())

# --- Inline-–∫–Ω–æ–ø–∫–∞ "–í –º–µ–Ω—é" ---
def inline_back_to_menu():
    keyboard = [
        [InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    file_id = "BAACAgQAAxkDAAIEgGi5kTsunsNKCxSgT62lGkOro6iLAAI8KgACIJ7QUfgrP_Y9_DJKNgQ"
    await message.answer_video(video=file_id, reply_markup=inline_back_to_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–∫–∏ "–í –º–µ–Ω—é"
@dp.callback_query()
async def callbacks(callback: types.CallbackQuery):
    if callback.data == "back_to_menu":
        await callback.message.answer("–°–¥–µ–ª–∞–π —Å–≤–æ–π –≤—ã–±–æ—Ä", reply_markup=main_menu())
        await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id

    # --- –û–±—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∞ ---
    if message.text == "üìä –û–±—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∞":
        user_state[user_id] = "step1"
        text1 = (
            "–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω—É —Ü–µ–ª–∏–∫–æ–º –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é, –Ω—É–∂–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –≥–ª–∞–∑–∞–º–∏, "
            "–Ω–æ –∏ —Ç–µ–º–∏ —á–∞—Å—Ç—è–º–∏ —Ç–µ–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–≤–µ–¥—É—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ü–∏—Ñ—Ä—ã –≤ —Ç–∞–±–ª–∏—Ü—ã, —Å–¥–µ–ª–∞—é—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ "
            "–∏ –∫–æ–Ω–µ—á–Ω–æ –∂–µ —Å–¥–µ–ª–∞—é—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –≤—ã–≤–æ–¥—ã.\n\n"
            "–ò —Ç–∞–∫ —Ç–∞–±–ª–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞—é—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–µ–ª:"
        )
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"), KeyboardButton(text="–î–∞–ª–µ–µ‚û°")]],
            resize_keyboard=True
        )
        await message.answer(text1, reply_markup=keyboard)
        return

    elif user_state.get(user_id) == "step1" and message.text == "–î–∞–ª–µ–µ‚û°":
        user_state[user_id] = "step2"
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"), KeyboardButton(text="–î–∞–ª–µ–µ‚û°")]],
            resize_keyboard=True
        )
        await message.answer_photo(
            photo="AgACAgQAAxkBAAIM0Gi9LaXmP4pct66F2FEKUu0WAAF84gACqMoxG5bI6VHDQO5xqprkdwEAAwIAA3kAAzYE",
            reply_markup=keyboard
        )
        return

    elif user_state.get(user_id) == "step2" and message.text == "–î–∞–ª–µ–µ‚û°":
        del user_state[user_id]
        text2 = (
            "–°—Ç–æ–∏—Ç –æ—Ç–º–µ—Ç–∏—Ç—å —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å–¥–µ–ª–∞–Ω–∞ –Ω–∞ –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö —Ü–∏—Ñ—Ä–∞—Ö (—Å–µ–π—á–∞—Å –∏–º–µ–Ω–Ω–æ —Ç–∞–∫–∏–µ), "
            "–ø–æ—Ç–æ–º—É –∫–∞–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –∏–º–µ–µ—Ç —Ä–∞–∑–Ω—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å, –Ω–æ –æ—Å–Ω–æ–≤–Ω–∞—è –º—ã—Å–ª—å –¥—É–º–∞—é –ø–æ–Ω—è—Ç–Ω–∞:\n\n"
            "‚Äî –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å –±—É–¥–µ—Ç –æ–¥–∏–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n"
            "‚Äî –µ—Å–ª–∏ –¥–µ–ª–∞—Ç—å, –Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ –±—É–¥–µ—Ç –¥—Ä—É–≥–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n"
            "‚Äî –∏ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—ë —á—Ç–æ –∏–º–µ–µ–º (–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç + —Å–ª–æ–∂–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç), "
            "–ø–æ–ª—É—á–∏–º —Ç–æ —á—Ç–æ –Ω–∞–º –Ω–∞–¥–æ (–∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫ –ø—Ä–∏–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)\n\n"
            "–í–æ—Ç –ø–æ—á–µ–º—É —Ç–∞–∫ –≤–∞–∂–Ω–æ –≤–∏–¥–µ—Ç—å –≤—Å—é –∫–∞—Ä—Ç–∏–Ω—É —Ü–µ–ª–∏–∫–æ–º."
        )
        await message.answer(text2, reply_markup=main_menu())
        return

    # --- –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–≥–æ–≤–æ—Ä–∞ ---
    elif message.text == "üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–≥–æ–≤–æ—Ä–∞ –æ—Ñ–µ—Ä—Ç—ã":
        file_id = "BQACAgQAAxkBAAIFOGi6vNHLzH9IyJt0q7_V4y73FcdrAAKXGwACeDjZUSdnK1dqaQoPNgQ"
        await message.answer_document(file_id)
        return

    # --- –ì–æ—Ç–æ–≤ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å ---
    elif message.text == "üí∞ –ì–æ—Ç–æ–≤ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å":
        await message.answer("https://traiex.gitbook.io/user-guides/ru/kak-zaregistrirovatsya-na-traiex")
        return

    # --- FAQ ---
    elif message.text == "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã‚ùì":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:", reply_markup=faq_menu())
        return

    elif message.text in faq_data:
        await message.answer(faq_data[message.text])
        return

    # --- –¢–µ—Å—Ç ---
    elif message.text == "üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç" or user_id in user_test_path:
        if message.text == "üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç":
            await start_test(message)
        else:
            await handle_test_answer(message)
        return

    # --- –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ–µ –≤–æ–∑–º–æ–∂–Ω–æ ---
    elif message.text == "‚ú® –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ–µ –≤–æ–∑–º–æ–∂–Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä—è —Ä—ã—á–∞–≥–∞–º":
        instruction = (
            "üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å.\n"
            "–ü–æ–º–Ω–∏—Ç–µ, –ò–ò ‚Äî —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –∞ –Ω–µ –≤–æ–ª—à–µ–±–Ω–∞—è –ø–∞–ª–æ—á–∫–∞."
        )
        await message.answer(instruction, reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç")],[KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]],
            resize_keyboard=True
        ))
        return

    # --- –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ---
    elif message.text == "‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        user_state.pop(user_id, None)
        user_progress.pop(user_id, None)
        user_test_path.pop(user_id, None)
        user_test_answers.pop(user_id, None)
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=main_menu())
        return

    # --- –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ---
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é üëá", reply_markup=main_menu())


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
