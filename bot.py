# bot_filter.py
import asyncio
import sqlite3
import datetime
import logging
from typing import Optional

from aiogram import Bot, Dispatcher, types, F
from aiogram.client.bot import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardRemove, Message, CallbackQuery
)

# ========== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ==========
# –ü–æ—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω –∏ id –≥—Ä—É–ø–ø—ã –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ (chat id –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -100... –æ–±—ã—á–Ω–æ)
TOKEN = "8473772441:AAHpXfxOxR-OL6e3GSfh4xvgiDdykQhgTus"
HELPERS_CHAT_ID = -1003081706651  # <-- –ø–æ–º–µ–Ω—è–π –Ω–∞ —Å–≤–æ–π ID –≥—Ä—É–ø–ø—ã –ø–æ–º–æ—â–Ω–∏–∫–æ–≤

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
DB_PATH = "bot_filter.db"

# ========== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ ==========
MONTHLY_RATE = 0.09  # 9% –≤ –º–µ—Å—è—Ü (–∫–∞–∫ –≤ —Ç–≤–æ—ë–º –∫–æ–¥–µ)
MIN_INVESTMENT = 150  # –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ (–∏–ª–∏ –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å)
ASSISTANT_NAME = "–ê–ª–µ–∫—Å–µ–π –§–∏–Ω–∞–Ω—Å–æ–≤–∏—á"  # –∏–º—è ¬´–ª–∏—á–Ω–æ—Å—Ç–∏¬ª –±–æ—Ç–∞
ASSISTANT_LEGEND = (
    "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç <b>{name}</b>. –Ø ‚Äî —Ç–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫. "
    "–Ø –ø–æ–º–æ–≥ –º–Ω–æ–≥–∏–º –ª—é–¥—è–º —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç—å –∫ –∏—Ö –º–µ—á—Ç–∞–º ‚Äî –æ—Ç –º–∞—à–∏–Ω—ã –¥–æ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞. "
    "–†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å, –∏ —è –±—ã—Å—Ç—Ä–æ –ø–æ—Å—á–∏—Ç–∞—é –æ—Ä–∏–µ–Ω—Ç–∏—Ä."
).format(name=ASSISTANT_NAME)

# ========== –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ë–î ==========
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            first_name TEXT,
            username TEXT,
            language_code TEXT,
            created_at TEXT
        )
    """)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS requests (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            goal TEXT,
            cost INTEGER,
            monthly INTEGER,
            contact TEXT,
            status TEXT,
            group_msg_id INTEGER,
            created_at TEXT
        )
    """)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS stats (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            step TEXT,
            ts TEXT
        )
    """)
    conn.commit()
    conn.close()

def save_user(user: types.User):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
        INSERT OR IGNORE INTO users (user_id, first_name, username, language_code, created_at)
        VALUES (?, ?, ?, ?, ?)
    """, (user.id, user.first_name, user.username, user.language_code, datetime.datetime.utcnow().isoformat()))
    conn.commit()
    conn.close()

def save_stat(user_id: int, step: str):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("INSERT INTO stats (user_id, step, ts) VALUES (?, ?, ?)",
                (user_id, step, datetime.datetime.utcnow().isoformat()))
    conn.commit()
    conn.close()

def create_request(user_id: int, goal: str, cost: Optional[int], monthly: Optional[int], contact: Optional[str]):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
        INSERT INTO requests (user_id, goal, cost, monthly, contact, status, created_at)
        VALUES (?, ?, ?, ?, ?, ?, ?)
    """, (user_id, goal, cost, monthly, contact, "new", datetime.datetime.utcnow().isoformat()))
    req_id = cur.lastrowid
    conn.commit()
    conn.close()
    return req_id

def update_request_group_msg(req_id: int, group_msg_id: int):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("UPDATE requests SET group_msg_id=?, status=? WHERE id=?", (group_msg_id, "sent", req_id))
    conn.commit()
    conn.close()

def get_request(req_id: int):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT id, user_id, goal, cost, monthly, contact, status, group_msg_id, created_at FROM requests WHERE id=?", (req_id,))
    row = cur.fetchone()
    conn.close()
    return row

# ========== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ==========
def main_menu():
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å"), KeyboardButton(text="üìò FAQ")],
            [KeyboardButton(text="üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"), KeyboardButton(text="üìà –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ü–µ–ª–∏")],
            [KeyboardButton(text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–º–æ—â–Ω–∏–∫–æ–º")]
        ],
        resize_keyboard=True
    )
    return kb

def goal_keyboard():
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üöó –ú–∞—à–∏–Ω–∞"), KeyboardButton(text="üè° –î–æ–º")],
            [KeyboardButton(text="üí∏ –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥"), KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    return kb

def cost_options_for(goal: str):
    if goal == "–ú–∞—à–∏–Ω–∞":
        opts = ["100 000 ‚ÇΩ", "500 000 ‚ÇΩ", "1 000 000 ‚ÇΩ"]
    elif goal == "–î–æ–º":
        opts = ["3 000 000 ‚ÇΩ", "5 000 000 ‚ÇΩ", "15 000 000 ‚ÇΩ"]
    else:
        opts = ["100 000 ‚ÇΩ", "500 000 ‚ÇΩ", "1 000 000 ‚ÇΩ"]
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for opt in opts:
        kb.add(KeyboardButton(text=opt))
    kb.add(KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥"))
    return kb

def monthly_keyboard():
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="10 000 ‚ÇΩ"), KeyboardButton(text="20 000 ‚ÇΩ"), KeyboardButton(text="30 000 ‚ÇΩ")],
            [KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    return kb

def contact_keyboard_request():
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", request_contact=True)],
            [KeyboardButton(text="‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å email (–≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º)"), KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")],
        ],
        resize_keyboard=True
    )
    return kb

def cta_inline_for_helpers(req_id: int):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"confirm_{req_id}")],
    ])
    return kb

# ========== –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–≤ –ø–∞–º—è—Ç–∏) ==========
# –ù–µ–±–æ–ª—å—à–æ–π —Å—Ç–µ–π—Ç-–º—ç–ø user_id -> state –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
user_state = {}  # example: {user_id: "expect_goal"}
user_temp = {}   # example: {user_id: {"goal": "–î–æ–º", "cost": 500000, ...}}

# ========== –£—Ç–∏–ª–∏—Ç—ã —Ä–∞—Å—á—ë—Ç–∞ ==========
def parse_amount(text: str) -> Optional[int]:
    # "1 000 000 ‚ÇΩ" -> 1000000
    try:
        cleaned = text.replace("‚ÇΩ", "").replace(" ", "").replace(",", "")
        return int(cleaned)
    except Exception:
        return None

def run_compound_calc(cost: int, monthly: int, monthly_rate: float = MONTHLY_RATE):
    total = 0.0
    month = 0
    monthly_totals = []
    while total < cost:
        month += 1
        total = (total + monthly) * (1 + monthly_rate)
        monthly_totals.append(int(total))
        # safety break
        if month > 600: break
    return month, monthly_totals

def run_passive_calc(target_income: int, monthly: int, monthly_rate: float = MONTHLY_RATE):
    capital = 0.0
    month = 0
    passive_list = []
    while True:
        month += 1
        capital = (capital + monthly) * (1 + monthly_rate)
        passive = capital * monthly_rate
        passive_list.append(int(passive))
        if passive >= target_income or month > 600:
            break
    return month, passive_list

# ========== –•–µ–Ω–¥–ª–µ—Ä—ã ==========
@dp.message(Command("start"))
async def cmd_start(message: Message):
    save_user(message.from_user)
    save_stat(message.from_user.id, "start")
    user_temp.pop(message.from_user.id, None)
    user_state[message.from_user.id] = "idle"

    text = f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>!\n\n" \
           f"{ASSISTANT_LEGEND}\n\n" \
           "–ù–µ–±–æ–ª—å—à–æ–µ –∑–∞–º–µ—á–∞–Ω–∏–µ: —è –Ω–µ –ø—Ä–æ–¥–∞—é –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ ‚Äî —è –ø–æ–º–æ–≥–∞—é –Ω–∞—Ö–æ–¥–∏—Ç—å –ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é —Ç—ë–ø–ª—ã–µ –∑–∞—è–≤–∫–∏ –∂–∏–≤—ã–º –ø–æ–º–æ—â–Ω–∏–∫–∞–º."
    await message.answer(text, reply_markup=main_menu())

@dp.message(F.text == "üöÄ –ù–∞—á–∞—Ç—å")
async def start_flow(message: Message):
    save_stat(message.from_user.id, "start_flow")
    user_state[message.from_user.id] = "expect_goal"
    user_temp[message.from_user.id] = {}
    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ, {message.from_user.first_name}! –ö–∞–∫–∞—è —É —Ç–µ–±—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å?", reply_markup=goal_keyboard())

@dp.message(F.text == "üìò FAQ")
async def faq(message: Message):
    await message.answer(
        "FAQ ‚Äî –∫–æ—Ä–æ—Ç–∫–æ:\n\n"
        "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—Ö–æ–¥: 150 USDT (–ø—Ä–∏–º–µ—Ä–Ω–æ –ø–æ –∫—É—Ä—Å—É). \n"
        "‚Ä¢ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ 6‚Äì12% –≤ –º–µ—Å—è—Ü (–≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ).\n"
        "‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏–π –ø—Ä–∏–±—ã–ª–∏ –Ω–µ—Ç ‚Äî –ø–æ–º–æ–≥–∞–µ–º —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π –∏ —Ä–∏—Å–∫–∞–º–∏.\n\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ ‚Äî –≤–≤–µ–¥–∏ –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –Ω–∞–∂–º–∏ '–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–º–æ—â–Ω–∏–∫–æ–º'.",
        reply_markup=main_menu()
    )

@dp.message(F.text == "üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")
async def start_test(message: Message):
    # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–∏–Ω–∏-—Ç–µ—Å—Ç ‚Äî –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –æ—Å—Ç–∞–≤–∏–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    await message.answer("–¢–µ—Å—Ç –ø–æ–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω. –î–∞–≤–∞–π –ª—É—á—à–µ –ø—Ä–æ—Å—á–∏—Ç–∞–µ–º —Ç–≤–æ—é —Ü–µ–ª—å ‚Äî –Ω–∞–∂–º–∏ 'üöÄ –ù–∞—á–∞—Ç—å' —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è.", reply_markup=main_menu())

@dp.message(F.text == "üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–º–æ—â–Ω–∏–∫–æ–º")
async def contact_helper(message: Message):
    # –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –∂–∏–≤—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º (–≤ –ø—Ä–∏–º–µ—Ä–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É/–ø—Ä–æ—Ñ–∏–ª—å)
    await message.answer(
        "–¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞—à–µ–º—É –∫–æ–º–∞–Ω–¥–Ω–æ–º—É —á–∞—Ç—É –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É ‚Äî –Ω–∞–∂–º–∏ 'üöÄ –ù–∞—á–∞—Ç—å' –∏ –ø—Ä–æ–π–¥–∏ –±—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á—ë—Ç, "
        "—á—Ç–æ–±—ã –º—ã –ø–µ—Ä–µ–¥–∞–ª–∏ —Ç–µ–±–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞.",
        reply_markup=main_menu()
    )

# ========== –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ ==========
@dp.message(lambda message: user_state.get(message.from_user.id) == "expect_goal")
async def handle_goal(message: Message):
    text = message.text.strip()
    if text == "‚¨Ö –ù–∞–∑–∞–¥":
        user_state[message.from_user.id] = "idle"
        user_temp.pop(message.from_user.id, None)
        await message.answer("–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. –Ø —Ä—è–¥–æ–º üëá", reply_markup=main_menu())
        return

    mapping = {
        "üöó –ú–∞—à–∏–Ω–∞": "–ú–∞—à–∏–Ω–∞",
        "üè° –î–æ–º": "–î–æ–º",
        "üí∏ –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥": "–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥"
    }
    if text not in mapping:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ üòä", reply_markup=goal_keyboard())
        return

    goal = mapping[text]
    user_temp[message.from_user.id] = {"goal": goal}
    user_state[message.from_user.id] = "expect_cost"
    save_stat(message.from_user.id, f"chosen_goal:{goal}")

    if goal in ["–ú–∞—à–∏–Ω–∞", "–î–æ–º"]:
        await message.answer(f"–ü–æ–Ω—è–ª —Ç–µ–±—è, {message.from_user.first_name}. –°–∫–∞–∂–∏, –∫–∞–∫–∞—è –ø—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å { '–º–∞—à–∏–Ω—ã' if goal=='–ú–∞—à–∏–Ω–∞' else '–¥–æ–º–∞' }?", reply_markup=cost_options_for(goal))
    else:
        # –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥
        await message.answer("–°–∫–æ–ª—å–∫–æ –≤ –º–µ—Å—è—Ü —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞? –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=cost_options_for(goal))

# ========== –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ / –¥–æ—Ö–æ–¥–∞ ==========
@dp.message(lambda message: user_state.get(message.from_user.id) == "expect_cost")
async def handle_cost(message: Message):
    text = message.text.strip()
    if text == "‚¨Ö –ù–∞–∑–∞–¥":
        user_state[message.from_user.id] = "expect_goal"
        await message.answer("–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥. –í—ã–±–µ—Ä–∏ —Ü–µ–ª—å.", reply_markup=goal_keyboard())
        return

    amount = parse_amount(text)
    if amount is None:
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫, —Ç–∞–∫ –±—É–¥–µ—Ç –±—ã—Å—Ç—Ä–æ –∏ —Ç–æ—á–Ω–æ üòä", reply_markup=cost_options_for(user_temp[message.from_user.id]["goal"]))
        return

    user_temp[message.from_user.id]["cost"] = amount
    user_state[message.from_user.id] = "expect_monthly"
    save_stat(message.from_user.id, f"chosen_cost:{amount}")

    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç—ã –≥–æ—Ç–æ–≤ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –º–µ—Å—è—Ü? –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫.", reply_markup=monthly_keyboard())

# ========== –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π —Å—É–º–º—ã ==========
@dp.message(lambda message: user_state.get(message.from_user.id) == "expect_monthly")
async def handle_monthly(message: Message):
    text = message.text.strip()
    if text == "‚¨Ö –ù–∞–∑–∞–¥":
        user_state[message.from_user.id] = "expect_cost"
        await message.answer("–û–∫–µ–π ‚Äî –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏.", reply_markup=cost_options_for(user_temp[message.from_user.id]["goal"]))
        return

    monthly = parse_amount(text)
    if monthly is None:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.", reply_markup=monthly_keyboard())
        return

    user_temp[message.from_user.id]["monthly"] = monthly
    goal = user_temp[message.from_user.id]["goal"]
    cost = user_temp[message.from_user.id].get("cost")
    save_stat(message.from_user.id, f"chosen_monthly:{monthly}")

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º
    if goal in ["–ú–∞—à–∏–Ω–∞", "–î–æ–º"]:
        months_needed, monthly_totals = run_compound_calc(cost, monthly)
        # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —ç–º–ø–∞—Ç–∏—è
        await message.answer(f"–•–æ—Ä–æ—à–æ, {message.from_user.first_name}! –°–µ–π—á–∞—Å –ø–æ—Å—á–∏—Ç–∞—é... ‚è≥")
        # –ö–æ—Ä–æ—Ç–∫–∞—è ¬´—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è¬ª –Ω–æ—Ç–∞
        await message.answer(
            f"üìà <b>–†–µ–∑—É–ª—å—Ç–∞—Ç</b>:\n\n"
            f"–° –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏ {monthly:,} ‚ÇΩ/–º–µ—Å —Ç—ã —Å–º–æ–∂–µ—à—å { '–∫—É–ø–∏—Ç—å ' + goal.lower() if goal!='–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥' else '' } "
            f"—Å—Ç–æ–∏–º–æ—Å—Ç—å—é {cost:,} ‚ÇΩ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ <b>{months_needed}</b> –º–µ—Å—è—Ü–µ–≤.\n\n"
            f"–ß–µ—Å—Ç–Ω–æ: —Ä–∞—Å—á—ë—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–π –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å ~9%/–º–µ—Å. –ù–æ —ç—Ç–æ –¥–∞—ë—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ —Å—Ä–æ–∫–∞—Ö. üöÄ"
        )
    else:
        target = cost  # for passive goal we stored desired monthly income in 'cost'
        months_needed, passive_list = run_passive_calc(target, monthly)
        await message.answer("–°—á–∏—Ç–∞—é –≤–æ–∑–º–æ–∂–Ω—ã–π –ø–∞—Å—Å–∏–≤–Ω—ã–π –ø–æ—Ç–æ–∫... ‚è≥")
        await message.answer(
            f"üìà <b>–†–µ–∑—É–ª—å—Ç–∞—Ç</b>:\n\n"
            f"–ü—Ä–∏ –≤–ª–æ–∂–µ–Ω–∏–∏ {monthly:,} ‚ÇΩ/–º–µ—Å –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ (–ø—Ä–æ—Ü–µ–Ω—Ç—ã) –ø—Ä–∏–±–ª–∏–∑–∏—Ç—Å—è –∫ {target:,} ‚ÇΩ/–º–µ—Å —á–µ—Ä–µ–∑ ‚âà <b>{months_needed}</b> –º–µ—Å—è—Ü–µ–≤.\n\n"
            "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–≥—É –ø–µ—Ä–µ–¥–∞—Ç—å —Ç–≤–æ—é –∑–∞—è–≤–∫—É –ª–∏—á–Ω–æ–º—É –ø–æ–º–æ—â–Ω–∏–∫—É ‚Äî –æ–Ω —Å–≤—è–∂–µ—Ç—Å—è –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω."
        )

    # –ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å + CTA
    user_state[message.from_user.id] = "post_calc"
    await message.answer(
        "–•–æ—á–µ—à—å, —è –ø–µ—Ä–µ–¥–∞–º —ç—Ç–æ –∂–∏–≤–æ–º—É –ø–æ–º–æ—â–Ω–∏–∫—É –∏ –æ–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞?",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –î–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π"), KeyboardButton(text="‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–∞–º (–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)")],
                [KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥"), KeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ],
            resize_keyboard=True
        )
    )

# ========== –ü–æ—Å—Ç-—Ä–∞—Å—á—ë—Ç: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ ==========
@dp.message(lambda message: user_state.get(message.from_user.id) == "post_calc")
async def post_calc_handler(message: Message):
    text = message.text.strip()
    if text == "‚¨Ö –ù–∞–∑–∞–¥":
        user_state[message.from_user.id] = "expect_monthly"
        await message.answer("–í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π —Å—É–º–º—ã.", reply_markup=monthly_keyboard())
        return
    if text == "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        user_state[message.from_user.id] = "idle"
        user_temp.pop(message.from_user.id, None)
        await message.answer("–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –ø–æ–∑–∂–µ. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ.", reply_markup=main_menu())
        return
    if text == "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–∞–º (–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)":
        user_state[message.from_user.id] = "idle"
        user_temp.pop(message.from_user.id, None)
        await message.answer("–û–∫–µ–π ‚Äî –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –Ω–∞–∂–º–∏ 'üöÄ –ù–∞—á–∞—Ç—å'.", reply_markup=main_menu())
        return
    if text == "‚úÖ –î–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π":
        # –ü—Ä–æ—Å–∏–º –∫–æ–Ω—Ç–∞–∫—Ç (–∫–Ω–æ–ø–∫–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–∞) ‚Äî –ª–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
        user_state[message.from_user.id] = "expect_contact"
        await message.answer(
            "–ß—Ç–æ–±—ã –ø–æ–º–æ—â–Ω–∏–∫ –º–æ–≥ —Å–≤—è–∑–∞—Ç—å—Å—è —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º, –ø—Ä–∏—à–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ—Ñ–æ–Ω) ‚Äî –ª–∏–±–æ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –∏ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–æ–ª—å–∫–æ Telegram ID.",
            reply_markup=contact_keyboard_request()
        )
        return
    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —á—Ç–æ-—Ç–æ –µ—â—ë
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É.", reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –î–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π"), KeyboardButton(text="‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–∞–º (–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)")],
                [KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥"), KeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ],
            resize_keyboard=True
        ))

# ========== –°–±–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–∞ ==========
@dp.message(lambda message: user_state.get(message.from_user.id) == "expect_contact" and message.contact)
async def contact_via_request(message: Message):
    # –ø–æ–ª—É—á–∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É request_contact
    phone = message.contact.phone_number
    await finalize_and_send_request(message.from_user, contact=phone, message_obj=message)

@dp.message(lambda message: user_state.get(message.from_user.id) == "expect_contact")
async def contact_text_or_skip(message: Message):
    text = message.text.strip()
    if text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await finalize_and_send_request(message.from_user, contact=None, message_obj=message)
        return
    if text == "‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å email (–≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º)":
        await message.answer("–í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, email –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: info@you.ru).")
        user_state[message.from_user.id] = "expect_contact_email"
        return
    if user_state.get(message.from_user.id) == "expect_contact_email" or ("@" in text and "." in text):
        # –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è email
        await finalize_and_send_request(message.from_user, contact=text, message_obj=message)
        return
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –∏–ª–∏ –≤–≤–µ–¥–∏ —Ç–µ–ª–µ—Ñ–æ–Ω/email –≤—Ä—É—á–Ω—É—é.", reply_markup=contact_keyboard_request())

async def finalize_and_send_request(user: types.User, contact: Optional[str], message_obj: Message):
    uid = user.id
    temps = user_temp.get(uid, {})
    goal = temps.get("goal")
    cost = temps.get("cost")
    monthly = temps.get("monthly")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –ë–î
    req_id = create_request(uid, goal or "", cost or 0, monthly or 0, contact)
    save_stat(uid, f"created_request:{req_id}")
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã –ø–æ–º–æ—â–Ω–∏–∫–æ–≤
    username = f"@{user.username}" if user.username else "–Ω–µ—Ç"
    contact_info = contact if contact else "–Ω–µ —É–∫–∞–∑–∞–Ω (—Ç–æ–ª—å–∫–æ Telegram)"
    text = (
        f"üö® <b>–ù–æ–≤—ã–π –∏–Ω–≤–µ—Å—Ç–æ—Ä (–ª–∏–¥)</b>\n\n"
        f"üë§ –ò–º—è: {user.full_name}\n"
        f"üÜî ID: {uid}\n"
        f"üí¨ Username: {username}\n"
        f"üéØ –¶–µ–ª—å: {goal}\n"
        f"üí∂ –°—Ç–æ–∏–º–æ—Å—Ç—å/—Ü–µ–ª—å: {cost:,} ‚ÇΩ\n"
        f"üí∏ –ì–æ—Ç–æ–≤ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –º–µ—Å: {monthly:,} ‚ÇΩ\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact_info}\n"
        f"üïí –í—Ä–µ–º—è: {datetime.datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} (UTC)\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º."
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    sent = await bot.send_message(chat_id=HELPERS_CHAT_ID, text=text, reply_markup=cta_inline_for_helpers(req_id))
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î —Å id —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ
    update_request_group_msg(req_id, sent.message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message_obj.answer(
        f"–°–ø–∞—Å–∏–±–æ, {user.first_name}! –Ø –ø–µ—Ä–µ–¥–∞–ª(–∞) —Ç–≤–æ—é –∑–∞—è–≤–∫—É –∂–∏–≤–æ–º—É –ø–æ–º–æ—â–Ω–∏–∫—É. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –∫—Ç–æ-—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç ‚Äî —Ç—ã –ø–æ–ª—É—á–∏—à—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ–≥–æ.\n\n"
        "–ü–æ–∫–∞ –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_menu()
    )
    # –û—á–∏—Å—Ç–∏–º temp –∏ —Å—Ç–µ–π—Ç
    user_state.pop(uid, None)
    user_temp.pop(uid, None)

# ========== –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ ==========
@dp.callback_query()
async def handle_callbacks(cb: CallbackQuery):
    data = cb.data or ""
    user = cb.from_user
    chat_id = cb.message.chat.id if cb.message else None
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: callback_data = confirm_{req_id}
    if data.startswith("confirm_"):
        # —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤
        if chat_id != HELPERS_CHAT_ID:
            await cb.answer("–ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤.", show_alert=True)
            return
        try:
            req_id = int(data.split("_")[1])
        except Exception:
            await cb.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.", show_alert=True)
            return
        row = get_request(req_id)
        if not row:
            await cb.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", show_alert=True)
            return
        # row: (id, user_id, goal, cost, monthly, contact, status, group_msg_id, created_at)
        req_user_id = row[1]
        helper_name = user.full_name
        helper_username = f"@{user.username}" if user.username else None
        now = datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S (UTC)")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –ø–æ–º–æ—â–Ω–∏–∫–∞
        if helper_username:
            helper_contact_url = f"https://t.me/{user.username}"
        else:
            helper_contact_url = f"tg://user?id={user.id}"

        kb_user = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–º–æ—â–Ω–∏–∫—É {helper_name}", url=helper_contact_url)]
        ])
        try:
            await bot.send_message(chat_id=req_user_id,
                                   text=f"‚úÖ –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –ø–æ–º–æ—â–Ω–∏–∫–æ–º {helper_name}.\n‚è∞ {now}\n\n"
                                        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É –ø—Ä—è–º–æ –≤ Telegram.",
                                   reply_markup=kb_user)
        except Exception as e:
            logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", e)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ: –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª
        new_text = cb.message.text + f"\n\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–µ–Ω–æ {now} –ø–æ–º–æ—â–Ω–∏–∫–æ–º {helper_name}"
        try:
            await cb.message.edit_text(new_text)
        except Exception as e:
            logging.exception("–ù–µ —Å–º–æ–≥ –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ: %s", e)

        await cb.answer("–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω.")
        # –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ –ë–î (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        conn = sqlite3.connect(DB_PATH)
        cur = conn.cursor()
        cur.execute("UPDATE requests SET status=? WHERE id=?", ("confirmed", req_id))
        conn.commit()
        conn.close()
        return

# ========== –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π fallback ==========
@dp.message()
async def all_other_messages(message: Message):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –≤–æ—Ä–æ–Ω–∫–∏ ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—à–µ –ø–æ–π–º–∞–ª–∞ –±—ã.
    # –¢—É—Ç ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ / –ø–æ–º–æ—â—å
    await message.answer("–Ø —Ç–µ–±—è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª. –ù–∞–∂–º–∏ 'üöÄ –ù–∞—á–∞—Ç—å' —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –±—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á—ë—Ç –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∏–∑ –º–µ–Ω—é.", reply_markup=main_menu())

# ========== –ó–∞–ø—É—Å–∫ ==========
async def main():
    init_db()
    logging.info("Bot started")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())