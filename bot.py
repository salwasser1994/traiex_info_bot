import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.client.bot import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

TOKEN = "–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê"

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

user_state = {}
user_data = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    keyboard = [[KeyboardButton(text="üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")]]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# –ú–µ–Ω—é –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞
def post_calculation_menu():
    keyboard = [
        [KeyboardButton(text="üí∞ –ì–æ—Ç–æ–≤ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å")],
        [KeyboardButton(text="–ù–µ –≥–æ—Ç–æ–≤")],
        [KeyboardButton(text="–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏
def choose_goal_menu():
    keyboard = [
        [KeyboardButton(text="–ú–∞—à–∏–Ω–∞"), KeyboardButton(text="–î–æ–º"), KeyboardButton(text="–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
def choose_cost_menu(goal):
    if goal == "–ú–∞—à–∏–Ω–∞":
        options = ["100000", "500000", "1000000"]
    elif goal == "–î–æ–º":
        options = ["3000000", "5000000", "15000000"]
    else:
        options = ["100000", "500000", "1000000"]
    keyboard = [[KeyboardButton(text=opt)] for opt in options]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∫–ª–∞–¥–∞
def choose_monthly_invest_menu():
    keyboard = [
        [KeyboardButton(text="10000"), KeyboardButton(text="20000"), KeyboardButton(text="30000")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–º–µ—Å—è—á–Ω–æ–≥–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º —Å–ª–æ–∂–Ω—ã–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º
def calculate_investment_monthly(goal_amount, monthly_invest, annual_rate=135):
    daily_rate = (1 + annual_rate / 100) ** (1 / 365) - 1
    total = 0
    months = 0
    history = []

    while total < goal_amount:
        total += monthly_invest  # –≤–∫–ª–∞–¥ –≤ –Ω–∞—á–∞–ª–µ –º–µ—Å—è—Ü–∞
        for day in range(30):  # –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
            total += total * daily_rate
        months += 1
        history.append((months, total))
    return months, history, daily_rate

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_state[message.from_user.id] = "choose_goal"
    await message.answer("–ö–∞–∫–æ–≤–∞ —Ç–≤–æ—è —Ü–µ–ª—å?", reply_markup=choose_goal_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    text = message.text

    # –í—ã–±–æ—Ä —Ü–µ–ª–∏
    if user_state.get(user_id) == "choose_goal":
        if text in ["–ú–∞—à–∏–Ω–∞", "–î–æ–º", "–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥"]:
            user_data[user_id] = {"goal": text}
            user_state[user_id] = "choose_cost"
            await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {text}. –ö–∞–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å?", reply_markup=choose_cost_menu(text))
        return

    # –í—ã–±–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    if user_state.get(user_id) == "choose_cost":
        if text.isdigit():
            user_data[user_id]["cost"] = int(text)
            user_state[user_id] = "choose_monthly_invest"
            await message.answer("–°–∫–æ–ª—å–∫–æ –≤—ã –≥–æ—Ç–æ–≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –º–µ—Å—è—Ü?", reply_markup=choose_monthly_invest_menu())
        return

    # –í—ã–±–æ—Ä –≤–∫–ª–∞–¥–∞
    if user_state.get(user_id) == "choose_monthly_invest":
        if text.isdigit():
            user_data[user_id]["monthly_invest"] = int(text)
            # –†–∞—Å—á–µ—Ç
            cost = user_data[user_id]["cost"]
            monthly_invest = user_data[user_id]["monthly_invest"]
            months, history, daily_rate = calculate_investment_monthly(cost, monthly_invest)
            
            msg = f"üí° –†–∞—Å—á–µ—Ç –¥–ª—è —Ü–µ–ª–∏: {user_data[user_id]['goal']}\n"
            msg += f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {cost:,} ‚ÇΩ\n–í–∫–ª–∞–¥ –≤ –º–µ—Å—è—Ü: {monthly_invest:,} ‚ÇΩ\n–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: 135%\n\n"
            msg += "üìà –ù–∞–∫–æ–ø–ª–µ–Ω–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º —Å —É—á–µ—Ç–æ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–ª–æ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞:\n"
            for m, total in history:
                msg += f"–ú–µ—Å—è—Ü {m}: {int(total):,} ‚ÇΩ\n"
            msg += f"\nüéØ –í—ã –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç–µ —Ü–µ–ª–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {months} –º–µ—Å—è—Ü–µ–≤ (~{months//12} –ª–µ—Ç –∏ {months%12} –º–µ—Å—è—Ü–µ–≤).\n"
            msg += "–ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü –∫–∞–ø–∏—Ç–∞–ª —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–µ —Ç–æ–ª—å–∫–æ –∑–∞ —Å—á–µ—Ç –≤–∞—à–∏—Ö –≤–∫–ª–∞–¥–æ–≤, –Ω–æ –∏ –∑–∞ —Å—á–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤, —á—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π."
            
            await message.answer(msg, reply_markup=post_calculation_menu())
            user_state[user_id] = "post_calculation"
        return

    # –ü–æ—Å—Ç—Ä–∞—Å—á–µ—Ç–Ω–æ–µ –º–µ–Ω—é
    if user_state.get(user_id) == "post_calculation":
        if text == "üí∞ –ì–æ—Ç–æ–≤ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å":
            await message.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é/–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")
        elif text == "–ù–µ –≥–æ—Ç–æ–≤":
            user_state[user_id] = "choose_goal"
            await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=choose_goal_menu())
        elif text == "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ":
            user_state[user_id] = "choose_goal"
            await message.answer("–ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ. –ö–∞–∫–æ–≤–∞ —Ç–≤–æ—è —Ü–µ–ª—å?", reply_markup=choose_goal_menu())
        return

    # –õ—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=main_menu())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
