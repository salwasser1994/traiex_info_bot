import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.client.bot import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

TOKEN = "8473772441:AAHpXfxOxR-OL6e3GSfh4xvgiDdykQhgTus"

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

user_state = {}
user_data = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    keyboard = [
        [KeyboardButton(text="üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")],
        [KeyboardButton(text="üí∞ –ì–æ—Ç–æ–≤ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å")],
        [KeyboardButton(text="üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–≥–æ–≤–æ—Ä–∞ –æ—Ñ–µ—Ä—Ç—ã")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞
def post_calc_menu():
    keyboard = [
        [KeyboardButton(text="üí∞ –ì–æ—Ç–æ–≤ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å")],
        [KeyboardButton(text="–ù–µ –≥–æ—Ç–æ–≤")],
        [KeyboardButton(text="–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø–æ—Å—á–∏—Ç–∞–µ–º, –∫–æ–≥–¥–∞ —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–∫–æ–ø–∏—Ç—å –Ω–∞ —Å–≤–æ—é —Ü–µ–ª—å.", reply_markup=main_menu())

# –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞
@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    text = message.text

    if text == "üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç" or text == "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ":
        user_state[user_id] = "choose_goal"
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ú–∞—à–∏–Ω–∞"), KeyboardButton(text="–î–æ–º"), KeyboardButton(text="–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥")]
            ],
            resize_keyboard=True
        )
        await message.answer("–ö–∞–∫–æ–≤–∞ —Ç–≤–æ—è —Ü–µ–ª—å?", reply_markup=keyboard)
        return

    if user_state.get(user_id) == "choose_goal":
        user_data[user_id] = {"goal": text}
        if text == "–ú–∞—à–∏–Ω–∞":
            user_state[user_id] = "car_cost"
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="100 000 ‚ÇΩ"), KeyboardButton(text="500 000 ‚ÇΩ"), KeyboardButton(text="1 000 000 ‚ÇΩ")]
                ],
                resize_keyboard=True
            )
            await message.answer("–ö–∞–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—à–∏–Ω—ã?", reply_markup=keyboard)
        elif text == "–î–æ–º":
            user_state[user_id] = "house_cost"
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="3 000 000 ‚ÇΩ"), KeyboardButton(text="5 000 000 ‚ÇΩ"), KeyboardButton(text="15 000 000 ‚ÇΩ")]
                ],
                resize_keyboard=True
            )
            await message.answer("–ö–∞–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–º–∞?", reply_markup=keyboard)
        else:
            await message.answer("–ü–æ–∫–∞ —Å—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –ú–∞—à–∏–Ω—É –∏–ª–∏ –î–æ–º.")
        return

    if user_state.get(user_id) in ["car_cost", "house_cost"]:
        try:
            amount = int(text.replace(" ‚ÇΩ", "").replace(" ", ""))
            user_data[user_id]["cost"] = amount
            user_state[user_id] = "monthly_invest"
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="10 000 ‚ÇΩ"), KeyboardButton(text="20 000 ‚ÇΩ"), KeyboardButton(text="30 000 ‚ÇΩ")]
                ],
                resize_keyboard=True
            )
            await message.answer("–°–∫–æ–ª—å–∫–æ –≤—ã –≥–æ—Ç–æ–≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –º–µ—Å—è—Ü?", reply_markup=keyboard)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—É–º–º.")
        return

    if user_state.get(user_id) == "monthly_invest":
        try:
            monthly = int(text.replace(" ‚ÇΩ", "").replace(" ", ""))
            user_data[user_id]["monthly"] = monthly
            # –†–∞—Å—á–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
            cost = user_data[user_id]["cost"]
            total = 0
            month = 0
            monthly_rate = 0.1125  # 11,25% –≤ –º–µ—Å—è—Ü
            monthly_list = []
            while total < cost:
                total = (total + monthly) * (1 + monthly_rate)
                month += 1
                monthly_list.append(total)
            # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
            msg = f"üìà –ù–∞–∫–æ–ø–ª–µ–Ω–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º —Å —É—á–µ—Ç–æ–º –º–µ—Å—è—á–Ω–æ–≥–æ —Å–ª–æ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ 11,25% (135% –≥–æ–¥–æ–≤—ã—Ö):\n"
            for i, val in enumerate(monthly_list, start=1):
                msg += f"–ú–µ—Å—è—Ü {i}: {int(val):,} ‚ÇΩ\n"
            msg += f"\n–° –≤–∞—à–µ–π –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–µ–π {monthly:,} ‚ÇΩ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–∫–æ–ø–∏—Ç—å –Ω–∞ {user_data[user_id]['goal']} —Å—Ç–æ–∏–º–æ—Å—Ç—å—é {cost:,} ‚ÇΩ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {month} –º–µ—Å—è—Ü–µ–≤.\n\n"
            msg += "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —Ä–∞—Å—á–µ—Ç —É—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ª–æ–∂–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü. –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –¥–æ—Ö–æ–¥ –∑–∞ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫ —Å—É–º–º–µ –≤–∫–ª–∞–¥–∞ –∏ —Ç–∞–∫–∂–µ –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –¥–æ—Ö–æ–¥ –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ. –≠—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–æ—Å—Ç–∞ –∫–∞–ø–∏—Ç–∞–ª–∞!"
            await message.answer(msg, reply_markup=post_calc_menu())
            user_state.pop(user_id)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—É–º–º.")
        return

    if text == "–ù–µ –≥–æ—Ç–æ–≤":
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())

    if text == "üí∞ –ì–æ—Ç–æ–≤ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å":
        await message.answer("–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º...", reply_markup=main_menu())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
