import os
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.bot import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton
)

# –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (Render -> Environment)
TOKEN = os.getenv("API_Token")
if not TOKEN:
    raise ValueError("API_Token –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# ---- –ù–ê–°–¢–†–û–ô–ö–ò ----
WELCOME_VIDEO_ID = "BAACAgQAAxkDAAIC12i4SwjQT7gKv_ccxLe2dV5GAYreAAIqIQACIJ7IUZCFvYLU5H0KNgQ"

# ---- INLINE –ú–ï–ù–Æ ----
def inline_main_menu() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton(text="üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="test")],
        [InlineKeyboardButton(text="üí∞ –ì–æ—Ç–æ–≤ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="invest")],
        [InlineKeyboardButton(text="üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–≥–æ–≤–æ—Ä–∞ –æ—Ñ–µ—Ä—Ç—ã", callback_data="agreement")],
        [InlineKeyboardButton(text="ü§ñ –ß—Ç–æ —Ç–∞–∫–æ–µ –±–æ—Ç –Ω–∞ –ò–ò", callback_data="ai_bot")],
        [InlineKeyboardButton(text="‚ùì –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# ---- REPLY –ö–õ–ê–í–ò–ê–¢–£–†–ê ----
def reply_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"), KeyboardButton(text="üí∞ –ì–æ—Ç–æ–≤ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å")],
            [KeyboardButton(text="üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–≥–æ–≤–æ—Ä–∞ –æ—Ñ–µ—Ä—Ç—ã"), KeyboardButton(text="ü§ñ –ß—Ç–æ —Ç–∞–∫–æ–µ –±–æ—Ç –Ω–∞ –ò–ò")],
            [KeyboardButton(text="‚ùì –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–ª—é–±–æ–π —Ç–µ–∫—Å—Ç‚Ä¶"
    )

# ---- START ----
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ + –∫–Ω–æ–ø–∫—É –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
    show_menu_btn = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üìä –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é", callback_data="show_menu")]]
    )
    await message.answer_video(
        video=WELCOME_VIDEO_ID,
        caption="–ª—é–±–æ–π —Ç–µ–∫—Å—Ç",
        reply_markup=show_menu_btn
    )

# ---- CALLBACKS ----
@dp.callback_query()
async def callbacks(callback: types.CallbackQuery):
    data = callback.data

    if data == "show_menu":
        # 1) –°–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–º–µ–Ω—é
        await callback.message.answer("üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=inline_main_menu())
        # 2) –í–∫–ª—é—á–∞–µ–º Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ –≤—Å–µ–º–∏ –ø—É–Ω–∫—Ç–∞–º–∏
        await callback.message.answer("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–∫—Ä—ã—Ç–∞ üëá", reply_markup=reply_menu())
        await callback.answer()
        return

    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ (inline)
    mapping = {
        "test": "üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç",
        "invest": "üí∞ –ì–æ—Ç–æ–≤ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å",
        "agreement": "üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–≥–æ–≤–æ—Ä–∞ –æ—Ñ–µ—Ä—Ç—ã",
        "ai_bot": "ü§ñ –ß—Ç–æ —Ç–∞–∫–æ–µ –±–æ—Ç –Ω–∞ –ò–ò",
        "faq": "‚ùì –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
    }
    if data in mapping:
        await callback.answer()
        await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {mapping[data]} (–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ) ‚úÖ")
        return

    await callback.answer()

# ---- –û–ë–†–ê–ë–û–¢–ö–ê REPLY-–ö–ù–û–ü–û–ö (—Ç–µ–∫—Å—Ç–∞) ----
@dp.message(F.text.in_({
    "üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç",
    "üí∞ –ì–æ—Ç–æ–≤ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å",
    "üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–≥–æ–≤–æ—Ä–∞ –æ—Ñ–µ—Ä—Ç—ã",
    "ü§ñ –ß—Ç–æ —Ç–∞–∫–æ–µ –±–æ—Ç –Ω–∞ –ò–ò",
    "‚ùì –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
}))
async def handle_reply_buttons(message: types.Message):
    await message.answer(f"–í—ã –Ω–∞–∂–∞–ª–∏: {message.text} (–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ) ‚úÖ")

# ---- RUN ----
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
